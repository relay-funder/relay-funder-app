NODE_ENV=development

# Basic Configuration
NEXT_PUBLIC_PRIVY_APP_ID=
NEXT_PUBLIC_CAMPAIGN_INFO_FACTORY=
NEXT_PUBLIC_PLEDGE_TOKEN=
NEXT_PUBLIC_PLEDGE_TOKEN_DECIMALS=18
NEXT_PUBLIC_ITEM_REGISTRY=
NEXT_PUBLIC_RPC_URL=https://alfajores-forno.celo-testnet.org
DATABASE_URL=postgres://akashic:akashic@db:5432/akashic_dev

# Database Configuration
# Prisma log levels (comma-separated): query, info, warn, error
# Default: error only. Use "error,warn,query" for verbose database logging
PRISMA_LOG_LEVELS=error

NEXT_PUBLIC_ADMIN_ADDRESS=
NEXT_PUBLIC_USDC_ADDRESS=
NEXT_PUBLIC_USDC_DECIMALS=

# =============================================================================
# DUAL TREASURY CONFIGURATION (MVP TESTING ONLY)
# =============================================================================
# This section enables dual treasury deployment for testing both payment flows:
# 1. Crypto-Only Flow (KeepWhatsRaised) - Direct wallet payments via existing TreasuryFactory
# 2. Credit Card Flow (PaymentTreasury) - Fiat-to-crypto via Crowdsplit + bridge contract
#
# IMPORTANT: This dual treasury approach is TEMPORARY for MVP testing.
# Production will use a single unified contract that handles both flows internally.

# Treasury Mode Configuration
# Options: 'DUAL' (current MVP) | 'UNIFIED' (future production)
TREASURY_MODE=DUAL

# KeepWhatsRaised Treasury (Crypto-Only Flow)
# Uses existing TreasuryFactory pattern for direct wallet-to-wallet USDC payments
NEXT_PUBLIC_TREASURY_FACTORY=                    # KeepWhatsRaised factory contract address
NEXT_PUBLIC_GLOBAL_PARAMS=                       # Global parameters contract address
NEXT_PUBLIC_PLATFORM_HASH=                       # Platform identifier hash
NEXT_PUBLIC_PLATFORM_ADMIN=                      # Admin wallet for KeepWhatsRaised approvals

# PaymentTreasury (Credit Card Flow) - NEW FOR DUAL TREASURY
# Separate contract system for Crowdsplit integration and automated treasury funding
NEXT_PUBLIC_PAYMENT_TREASURY_FACTORY=            # PaymentTreasury factory contract address
NEXT_PUBLIC_PAYMENT_TREASURY_ADMIN=              # PaymentTreasury admin wallet address
NEXT_PUBLIC_CROWDSPLIT_BRIDGE_ADDRESS=           # Bridge contract for automated USDC deposits

# Enhanced Crowdsplit Integration for Treasury Bridge
CROWDSPLIT_TREASURY_WEBHOOK_URL=                 # Webhook endpoint for treasury funding notifications
CROWDSPLIT_AUTO_FUNDING_ENABLED=true             # Feature flag for automatic treasury funding
CROWDSPLIT_TREASURY_FUNDING_DELAY=60             # Delay in seconds before funding treasury

# =============================================================================

# Cloudinary Configuration
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=
NEXT_PUBLIC_CLOUDINARY_API_KEY=
CLOUDINARY_API_SECRET=
NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=

# Crowdsplit/Stripe Configuration
CROWDSPLIT_CLIENT_ID=
CROWDSPLIT_CLIENT_SECRET=
CROWDSPLIT_API_URL=
CROWDSPLIT_WEBHOOK_SECRET=

# Numbers Protocol Configuration
NUMBERS_PROTOCOL_TOKEN=
NUMBERS_PROTOCOL_API_KEY=

# Vercel Configuration (optional)
NEXT_PUBLIC_VERCEL_ENV=
NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF=

NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA=

# Feature Flags
NEXT_PUBLIC_ENABLE_ROUNDS=true
NEXT_PUBLIC_ENABLE_DUAL_TREASURY=true            # Feature flag for dual treasury testing

# Sentry Configuration
SENTRY_DSN=

# Developer Mock
MOCK_API=true

# generate with `npx auth secret`. Read more: https://cli.authjs.dev
AUTH_SECRET=""
NEXTAUTH_URL="http://localhost:1000"
NEXT_PUBLIC_BASE_URL="http://localhost:1000"
# Get projectId from https://cloud.reown.com
NEXT_PUBLIC_REOWN_CLOUD_PROJECT_ID=""
