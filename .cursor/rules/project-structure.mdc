---
description: |
  Defines the required directory and file structure for the Akashic project. All code, configuration, and documentation must adhere to this structure to ensure maintainability, scalability, and consistency across the codebase.
globs:
  - "app/**"
  - "components/**"
  - "lib/**"
  - "server/**"
  - "prisma/**"
  - "contracts/**"
  - "public/**"
  - "types/**"
  - "test/**"
  - "scripts/**"
  - "tailwind.config.ts"
  - "next.config.js"
  - "package.json"
  - "pnpm-lock.yaml"
  - "docker-compose.yml"
  - ".env*"
alwaysApply: true
---

# Akashic Project Structure Guide

## Overview
Akashic is a Next.js 15 fundraising platform for open source projects built with TypeScript, Prisma, PostgreSQL, and Web3 integration. The project uses Docker for development and pnpm as the package manager.

## Key Architecture Components

### Frontend Framework
- **Next.js 15** with App Router ([app/layout.tsx](mdc:app/layout.tsx))
- **TypeScript** for type safety
- **Tailwind CSS** for styling ([tailwind.config.ts](mdc:tailwind.config.ts))
- **Radix UI** components for accessible UI primitives

### Database & Backend
- **PostgreSQL** database with Prisma ORM ([prisma/schema.prisma](mdc:prisma/schema.prisma))
- **NextAuth.js** for authentication ([server/auth/config.ts](mdc:server/auth/config.ts))
- **Prisma Client** for database operations ([lib/database.ts](mdc:lib/database.ts))

### Web3 Integration
- **Wagmi** and **Viem** for Ethereum interactions
- **SIWE** (Sign-In with Ethereum) for wallet authentication
- **Silk Wallet SDK** for wallet connectivity
- Smart contract ABIs in [contracts/](mdc:contracts/) directory

## Directory Structure

### `/app` - Next.js App Router
- **Pages**: Route-based file structure
- **API Routes**: Server-side API endpoints in `/api`
- **Layouts**: Shared layout components
- **Key Routes**:
  - `/campaigns` - Campaign management and viewing
  - `/profile` - User profile and settings
  - `/dashboard` - User dashboard
  - `/admin` - Admin panel functionality

### `/components` - React Components
- **UI Components**: Reusable UI elements in `/ui`
- **Feature Components**: Domain-specific components
- **Layout Components**: Page structure components

### `/lib` - Utility Libraries
- **Database**: Database operations and queries
- **API**: API client functions and types
- **Web3**: Blockchain interaction utilities
- **Utils**: General utility functions
- **Hooks**: Custom React hooks

### `/server` - Server-side Code
- **Auth**: Authentication configuration and providers
- **Database**: Database connection and setup

### `/prisma` - Database Schema
- **Schema**: Database models and relationships
- **Migrations**: Database migration files
- **Seed**: Database seeding scripts

### `/types` - TypeScript Definitions
- **Campaign**: Campaign-related types
- **User**: User-related types
- **API**: API response types

## Key Features
1. **Campaign Management**: Create, manage, and fund campaigns
2. **Web3 Integration**: Wallet connectivity and blockchain transactions
3. **Payment Processing**: Stripe integration for fiat payments
4. **User Authentication**: Wallet-based authentication with SIWE
5. **Admin Panel**: Administrative functionality
6. **Collections**: Curated campaign collections
7. **Rounds**: Funding rounds with quadratic funding support

## Development Workflow
- Use Docker for local development ([docker-pnpm-rules.mdc](mdc:.cursor/rules/docker-pnpm-rules.mdc))
- Database migrations via Prisma
- pnpm for package management
- ESLint and Prettier for code quality
