---
description: 
globs: 
alwaysApply: true
---
# Docker and pnpm Command Execution Rules

## Core Principles
1. Docker is ONLY used for local development
2. pnpm is the ONLY allowed package manager
3. Commands must be executed in the correct context (app container vs host machine)
4. Development mode uses fully shared volumes between host and container

## Command Execution Rules

### Database Operations
- Database migrations MUST be executed inside the app container:
  ```bash
  docker-compose exec app pnpm prisma migrate dev
  docker-compose exec app pnpm prisma db seed
  ```
- Database resets MUST follow this sequence:
  ```bash
  docker-compose down -v
  docker-compose up -d
  docker-compose exec app pnpm prisma generate
  docker-compose exec app pnpm prisma migrate dev
  docker-compose exec app pnpm prisma db seed
  ```

### Package Management
- In development mode, packages can be installed directly on the host machine:
  ```bash
  pnpm install
  pnpm add <package-name>
  pnpm remove <package-name>
  ```
- When container is not running, use Docker exec:
  ```bash
  docker-compose exec app pnpm install
  docker-compose exec app pnpm add <package-name>
  docker-compose exec app pnpm remove <package-name>
  ```
- NEVER use npm or yarn commands
- After installing packages on host, restart the development server:
  ```bash
  docker-compose restart app
  ```

### Development Commands
- Next.js development server MUST be started via Docker:
  ```bash
  docker-compose up
  ```
- Build commands MUST be executed inside the app container:
  ```bash
  docker-compose exec app pnpm build
  docker-compose exec app pnpm start
  ```

### Environment Setup
- Environment variables MUST be set in `.env.local`
- Database connection MUST use the Docker service name:
  ```
  DATABASE_URL=postgres://akashic:akashic@db:5432/akashic_dev
  ```

### Container Management
- Container cleanup MUST use:
  ```bash
  docker-compose down
  ```
- For complete reset including volumes:
  ```bash
  docker-compose down -v
  ```

## Security Rules
1. Database port (5432) MUST only be exposed to localhost
2. Non-root user (nextjs) MUST be used in the app container
3. Sensitive data MUST be stored in environment variables

## Error Handling
1. If database connection fails:
   - Check if database container is running
   - Verify environment variables
   - Ensure migrations are applied
2. If package installation fails:
   - Clear pnpm store: `pnpm store prune`
   - Rebuild container: `docker-compose build app`
3. If container fails to start:
   - Check logs: `docker-compose logs app`
   - Verify port availability
   - Check for conflicting services

## Best Practices
1. Always use `docker-compose exec app` for commands that need to run inside the container
2. Use `docker-compose up -d` for detached mode when appropriate
3. Keep Docker images updated with security patches
4. Monitor container resource usage
5. Use volume mounts for development to enable hot reloading
6. Install packages directly on host machine in development mode for better IDE integration
7. Restart the development server after installing new packages to ensure proper hot reloading

## Cross-Platform Considerations
1. Ensure Prisma schema includes all necessary binary targets:
   ```prisma
   binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
   ```
2. Use platform-agnostic commands
3. Consider M1/M2 Mac compatibility in Docker configurations
