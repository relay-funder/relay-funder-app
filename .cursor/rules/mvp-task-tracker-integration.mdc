# MVP Task Tracker Integration Rule

## Overview
The MVP task tracker ([mvp-task-tracker.mdc](mdc:mvp-task-tracker.mdc)) is the central source of truth for all development work on the Akashic platform. It must be consulted and updated for every feature implementation, bug fix, or code change.

## Mandatory Integration Requirements

### Before Starting Any Work
1. **Check Task Tracker**: Always review the current phase and task status in mvp-task-tracker.mdc
2. **Identify Related Tasks**: Find which checkbox items relate to your current work
3. **Understand Dependencies**: Review task order and dependencies within the current phase
4. **Verify Completion Status**: Ensure prerequisite tasks are marked [x] before starting dependent tasks

### During Development Work
1. **Update Progress**: Mark tasks as [x] immediately upon completion
2. **Add Discoveries**: If you find tasks are more complex than expected, break them down into sub-tasks
3. **Track Blockers**: Document any blockers or dependencies discovered during implementation
4. **Maintain Accuracy**: Correct any task status that doesn't match actual implementation state

### After Completing Work
1. **Mark Complete**: Update checkbox from [ ] to [x] for completed tasks
2. **Verify Implementation**: Ensure the task is truly complete and tested before marking
3. **Update Phase Progress**: Recalculate phase completion percentages
4. **Identify Next Tasks**: Determine which tasks are now unblocked and ready to start

## üß™ **MANDATORY TESTING & VERIFICATION PROCESS**

### Code Quality Gates (MUST PASS BEFORE COMMIT)

**üî¥ CRITICAL: All code MUST pass these checks before committing to version control:**

#### 1. **TypeScript Compilation** (MANDATORY)
```bash
# Generate Prisma client after schema changes
docker-compose exec app pnpm prisma generate

# Test TypeScript compilation
docker-compose exec app pnpm build
```
**Requirements:**
- ‚úÖ No TypeScript compilation errors in new code
- ‚úÖ No new ESLint errors introduced by changes
- ‚ö†Ô∏è Pre-existing errors in unrelated files are acceptable but should be noted
- ‚úÖ All imports resolve correctly
- ‚úÖ Type definitions are complete and accurate

#### 2. **Database Schema Validation** (For Schema Changes)
```bash
# Validate schema changes
docker-compose exec app pnpm prisma db push --accept-data-loss

# Regenerate client
docker-compose exec app pnpm prisma generate

# Test migration integrity
docker-compose exec app pnpm prisma migrate status
```
**Requirements:**
- ‚úÖ Database schema applies without errors
- ‚úÖ Migration files are properly generated
- ‚úÖ Prisma client regenerates successfully
- ‚úÖ No breaking changes to existing queries

#### 3. **Basic Functionality Testing** (MANDATORY)
```bash
# Start development server
docker-compose up -d

# Verify application starts without crashes
docker-compose logs app | grep -E "(error|Error|ERROR)" | tail -10
```
**Requirements:**
- ‚úÖ Application starts without fatal errors
- ‚úÖ New API endpoints return expected responses
- ‚úÖ Database connections work correctly
- ‚úÖ No runtime errors in browser console for new features

#### 4. **Integration Testing** (For Major Features)
**Test the complete user workflow:**
- ‚úÖ Admin approval process works end-to-end
- ‚úÖ Payment flows function correctly
- ‚úÖ Database records are created/updated properly
- ‚úÖ Treasury deployment succeeds (when applicable)
- ‚úÖ UI components render without errors

### Pre-Commit Checklist

**Before running `git add` and `git commit`, verify:**

- [ ] **Build Passes**: `pnpm build` completes without NEW errors
- [ ] **Schema Valid**: Database changes apply correctly (if applicable)
- [ ] **Types Generated**: Prisma client regenerated after schema changes
- [ ] **No Console Errors**: New code doesn't introduce browser console errors
- [ ] **Basic Testing**: Core functionality tested manually
- [ ] **Task Tracker Updated**: Completed tasks marked [x] in mvp-task-tracker.mdc
- [ ] **Documentation Updated**: README or relevant docs updated if needed

### Error Handling Policy

**TypeScript/ESLint Errors:**
- üî¥ **BLOCKING**: New TypeScript compilation errors in your code
- üî¥ **BLOCKING**: New ESLint errors introduced by your changes
- üü° **ACCEPTABLE**: Pre-existing errors in unrelated files (note them but don't block)
- ‚úÖ **PREFERRED**: Fix pre-existing errors when convenient, but not required

**Runtime Errors:**
- üî¥ **BLOCKING**: Fatal application crashes
- üî¥ **BLOCKING**: Database connection failures
- üî¥ **BLOCKING**: API endpoints returning 500 errors
- üü° **REVIEW**: Non-fatal warnings in development logs

**Testing Requirements:**
- üî¥ **MANDATORY**: Manual testing of new features
- üü° **PREFERRED**: Automated tests for complex logic
- ‚úÖ **OPTIONAL**: End-to-end testing (nice to have)

### Version Control Integration

**Commit Message Standards:**
```
feat: implement dual treasury foundation for MVP testing

- Add TreasuryInterface abstraction layer
- Create CryptoTreasuryManager and PaymentTreasuryManager
- Update database schema with dual treasury fields
- Add migration 20250721161704_add_dual_treasury_fields

Tasks completed:
- [x] Treasury interface abstraction
- [x] Database schema updates
- [x] Contract ABIs for PaymentTreasury

Testing:
- ‚úÖ TypeScript compilation passes
- ‚úÖ Database migration applies successfully
- ‚úÖ Prisma client regenerates correctly
```

**Required Information in Commits:**
- Brief description of changes
- List of completed tasks from mvp-task-tracker.mdc
- Testing verification status
- Any known issues or limitations

## Task Status Guidelines

### Marking Tasks Complete [x]
A task should only be marked [x] when:
- Feature is fully implemented and functional
- Code follows existing patterns and standards
- **TESTING COMPLETED**: All verification checks pass
- **BUILD PASSES**: No new compilation errors
- **DATABASE WORKS**: Schema changes applied successfully (if applicable)
- No obvious bugs or issues remain
- Task deliverable matches the requirement

### Keeping Tasks Incomplete [ ]
Keep tasks as [ ] when:
- Feature is partially implemented
- **TESTING FAILED**: Verification checks don't pass
- **BUILD BROKEN**: Compilation errors exist
- **RUNTIME ERRORS**: Application crashes or fails
- Implementation needs refactoring or improvement
- Dependencies are not yet satisfied
- Requirements are not fully met

### Phase A Completion Criteria (Special Requirements)
Phase A tasks require extra validation due to their critical nature:

**A1. Contract Address Validation** - Mark [x] only when:
- All environment variables updated with CCP addresses
- Test campaign creation and admin approval works end-to-end
- Treasury deployment confirmed with new addresses
- Payment flow tested and confirmed working
- **BUILD PASSES**: No TypeScript errors
- **TESTING COMPLETE**: Manual verification of full workflow

**A2. Campaign Editing System** - Mark [x] only when:
- Edit form component fully functional
- Edit button visible on campaign pages (creator-only)
- Edit route protected and working
- PATCH API expanded to handle full campaign updates
- End-to-end editing workflow tested
- **BUILD PASSES**: Component compiles without errors
- **TESTING COMPLETE**: Full editing workflow verified

**A3. Admin Dashboard Enhancement** - Mark [x] only when:
- Treasury addresses displayed in admin cards
- Deployment status indicators working
- UI enhancements complete and tested
- **BUILD PASSES**: No compilation errors
- **TESTING COMPLETE**: Admin interface verified

## Phase-Based Development

### Current MVP Phase Priority
Always prioritize tasks in the current critical path:

**üî• CRITICAL PATH** (Must Complete for Demo):
1. **Phase A**: Contract Validation & Quick Wins (Day 1 - 8 hours)
2. **Phase B**: Notification System (Day 2 - 8 hours)
3. **Phase C**: Withdrawal System (Day 3 - 8 hours)
4. **Phase D**: Dual Treasury Integration (Parallel with B-C)

**üü° HIGH PRIORITY** (Important for Complete MVP):
5. **Phase E**: Round Sponsor Schema & Basic Enhancements
6. **Phase F**: Round Application Workflow (creator‚Üíadmin approval)
7. **Phase G**: Homepage QF Rounds Display
8. **Phase H**: Manual QF Match Fund System

### Immediate Priority (START HERE)
**Phase A is the ONLY work that should be started right now**:
- A1. Contract Address Validation (CRITICAL - 2 hours)
- A2. Campaign Editing System (HIGH VISUAL IMPACT - 4 hours)  
- A3. Admin Dashboard Enhancement (MEDIUM VISUAL IMPACT - 2 hours)

**DO NOT START** any Phase B, C, D, E, F, G, or H tasks until Phase A is 100% complete.

### Cross-Phase Dependencies
**Sequential Order**: A ‚Üí (B + C + D) ‚Üí E ‚Üí F ‚Üí G ‚Üí H

**Critical Dependencies**:
- **Phase A is MANDATORY FIRST** - validates core system functionality
- **Phase B can run parallel** to Phase C after Phase A complete
- **Phase C requires Phase A** contract validation complete  
- **Phase D can run parallel** to Phases B-C (dual treasury integration)
- **Phases E-H BLOCKED** until Phase A-D provide stable foundation

**Key Rules**:
- Never start Phase B or C until Phase A contract validation is complete
- Phases B, C, and D can be developed simultaneously after Phase A
- Phases E-H must wait for critical path (A-D) completion

## Integration with Existing Rules

### Code Quality Standards
- Follow all existing coding standards from [typescript-coding-standards.mdc](mdc:typescript-coding-standards.mdc)
- Apply database patterns from [database-patterns.mdc](mdc:database-patterns.mdc)
- Use established API patterns from [api-patterns.mdc](mdc:api-patterns.mdc)
- Maintain component consistency per [component-patterns.mdc](mdc:component-patterns.mdc)

### Development Workflow
- Follow Docker/pnpm rules from [docker-pnpm-rules.mdc](mdc:docker-pnpm-rules.mdc)
- Apply Web3 integration patterns when relevant
- Maintain environment configuration standards

## Task Tracker Maintenance

### Regular Updates
- Update task tracker with every commit that completes or progresses a task
- Keep completion percentages accurate for project planning
- Maintain clear distinction between completed, in-progress, and pending tasks

### Quality Assurance
- Verify marked complete tasks actually work end-to-end
- Test task dependencies and workflows
- Ensure no regression in previously completed functionality

## Examples

### Starting a New Task
```markdown
Before implementing "Update contract addresses with CCP details":
1. Check mvp-task-tracker.mdc Phase A status
2. Verify contract validation tasks are in correct order
3. Plan implementation approach
4. Set up testing environment
```

### Completing a Task
```markdown
After implementing "Treasury interface abstraction":
1. Run full verification checklist
2. Test TypeScript compilation
3. Verify database integration works
4. Mark task [x] in mvp-task-tracker.mdc
5. Update phase progress percentage
6. Commit with proper testing documentation
```

### Example Commit Process
```bash
# 1. Complete development work
# 2. Run verification checks
docker-compose exec app pnpm build
docker-compose exec app pnpm prisma generate

# 3. Update task tracker
# Mark completed tasks [x] in mvp-task-tracker.mdc

# 4. Commit with testing verification
git add .
git commit -m "feat: implement treasury interface abstraction

- Add TreasuryInterface with deploy(), getAddress(), processPayment(), withdraw()
- Create DualTreasuryManager coordination layer
- Update database schema with dual treasury fields

Tasks completed:
- [x] Treasury interface abstraction
- [x] Configuration-driven treasury selection
- [x] Database schema updates

Testing:
- ‚úÖ TypeScript compilation passes
- ‚úÖ Database migration applies successfully
- ‚úÖ Prisma client regenerates correctly
- ‚úÖ No new runtime errors introduced"
```

## Emergency Exception Process

**When Testing Must Be Bypassed:**
In rare cases where immediate deployment is critical, testing may be bypassed with:

1. **Document Exception**: Clearly state why testing was skipped
2. **Create Follow-up Task**: Add testing task to tracker for immediate completion
3. **Limit Scope**: Only skip testing for isolated, non-critical changes
4. **Team Approval**: Get explicit approval from project lead

**Example Exception Commit:**
```
hotfix: update contract address for demo

‚ö†Ô∏è TESTING BYPASSED: Critical demo requirement
- Updated NEXT_PUBLIC_TREASURY_FACTORY address
- TODO: Full end-to-end testing required immediately after demo

Follow-up tasks added to tracker:
- [ ] Test treasury deployment with new address
- [ ] Verify payment flow end-to-end
- [ ] Confirm no regression in existing functionality
```

---

**Remember: Quality gates exist to prevent production issues and maintain code stability. The few minutes spent on verification can save hours of debugging later.**
description:
globs:
alwaysApply: false
---
