---
description: |
  Ensures that all development work on the Akashic platform is tracked, updated, and validated through the MVP task tracker. This rule mandates strict adherence to the process outlined in mvp-task-tracker.mdc for every code change, feature, or bug fix.
globs:
  - "mvp-task-tracker.mdc"
  - "app/**"
  - "components/**"
  - "lib/**"
  - "server/**"
  - "prisma/**"
  - "contracts/**"
  - "types/**"
  - "test/**"
alwaysApply: true
---

# MVP Task Tracker Integration Rule

## Overview
The MVP task tracker ([mvp-task-tracker.mdc](mdc:mvp-task-tracker.mdc)) is the central source of truth for all development work on the Akashic platform. It must be consulted and updated for every feature implementation, bug fix, or code change.

## Mandatory Integration Requirements

### Before Starting Any Work
1. **Check Task Tracker**: Always review the current phase and task status in mvp-task-tracker.mdc
2. **Identify Related Tasks**: Find which checkbox items relate to your current work
3. **Understand Dependencies**: Review task order and dependencies within the current phase
4. **Verify Completion Status**: Ensure prerequisite tasks are marked [x] before starting dependent tasks

### During Development Work
1. **Update Progress**: Mark tasks as [x] immediately upon completion
2. **Add Discoveries**: If you find tasks are more complex than expected, break them down into sub-tasks
3. **Track Blockers**: Document any blockers or dependencies discovered during implementation
4. **Maintain Accuracy**: Correct any task status that doesn't match actual implementation state

### After Completing Work
1. **Mark Complete**: Update checkbox from [ ] to [x] for completed tasks
2. **Verify Implementation**: Ensure the task is truly complete and tested before marking
3. **Update Phase Progress**: Recalculate phase completion percentages
4. **Identify Next Tasks**: Determine which tasks are now unblocked and ready to start

## Task Status Guidelines

### Marking Tasks Complete [x]
A task should only be marked [x] when:
- Feature is fully implemented and functional
- Code follows existing patterns and standards
- Basic testing has been performed
- No obvious bugs or issues remain
- Task deliverable matches the requirement

### Keeping Tasks Incomplete [ ]
Keep tasks as [ ] when:
- Feature is partially implemented
- Implementation needs refactoring or improvement
- Dependencies are not yet satisfied
- Testing reveals significant issues
- Requirements are not fully met

### Phase A Completion Criteria (Special Requirements)
Phase A tasks require extra validation due to their critical nature:

**A1. Contract Address Validation** - Mark [x] only when:
- All environment variables updated with CCP addresses
- Test campaign creation and admin approval works end-to-end
- Treasury deployment confirmed with new addresses
- Payment flow tested and confirmed working

**A2. Campaign Editing System** - Mark [x] only when:
- Edit form component fully functional
- Edit button visible on campaign pages (creator-only)
- Edit route protected and working
- PATCH API expanded to handle full campaign updates
- End-to-end editing workflow tested

**A3. Admin Dashboard Enhancement** - Mark [x] only when:
- Treasury addresses displayed in admin cards
- Deployment status indicators working
- UI enhancements complete and tested

## Phase-Based Development

### Current MVP Phase Priority
Always prioritize tasks in the current critical path:

**ðŸ”¥ CRITICAL PATH** (Must Complete for Demo):
1. **Phase A**: Contract Validation & Quick Wins (Day 1 - 8 hours)
2. **Phase B**: Notification System (Day 2 - 8 hours)
3. **Phase C**: Withdrawal System (Day 3 - 8 hours)
4. **Phase D**: Dual Treasury Integration (Parallel with B-C)

**ðŸŸ¡ HIGH PRIORITY** (Important for Complete MVP):
5. **Phase E**: Round Sponsor Schema & Basic Enhancements
6. **Phase F**: Round Application Workflow (creatorâ†’admin approval)
7. **Phase G**: Homepage QF Rounds Display
8. **Phase H**: Manual QF Match Fund System

### Immediate Priority (START HERE)
**Phase A is the ONLY work that should be started right now**:
- A1. Contract Address Validation (CRITICAL - 2 hours)
- A2. Campaign Editing System (HIGH VISUAL IMPACT - 4 hours)  
- A3. Admin Dashboard Enhancement (MEDIUM VISUAL IMPACT - 2 hours)

**DO NOT START** any Phase B, C, D, E, F, G, or H tasks until Phase A is 100% complete.

### Cross-Phase Dependencies
**Sequential Order**: A â†’ (B + C + D) â†’ E â†’ F â†’ G â†’ H

**Critical Dependencies**:
- **Phase A is MANDATORY FIRST** - validates core system functionality
- **Phase B can run parallel** to Phase C after Phase A complete
- **Phase C requires Phase A** contract validation complete  
- **Phase D can run parallel** to Phases B-C (dual treasury integration)
- **Phases E-H BLOCKED** until Phase A-D provide stable foundation

**Key Rules**:
- Never start Phase B or C until Phase A contract validation is complete
- Phases B, C, and D can be developed simultaneously after Phase A
- Phases E-H must wait for critical path (A-D) completion

## Integration with Existing Rules

### Code Quality Standards
- Follow all existing coding standards from [typescript-coding-standards.mdc](mdc:typescript-coding-standards.mdc)
- Apply database patterns from [database-patterns.mdc](mdc:database-patterns.mdc)
- Use established API patterns from [api-patterns.mdc](mdc:api-patterns.mdc)
- Maintain component consistency per [component-patterns.mdc](mdc:component-patterns.mdc)

### Development Workflow
- Follow Docker/pnpm rules from [docker-pnpm-rules.mdc](mdc:docker-pnpm-rules.mdc)
- Apply Web3 integration patterns when relevant
- Maintain environment configuration standards

## Task Tracker Maintenance

### Regular Updates
- Update task tracker with every commit that completes or progresses a task
- Keep completion percentages accurate for project planning
- Maintain clear distinction between completed, in-progress, and pending tasks

### Quality Assurance
- Verify marked complete tasks actually work end-to-end
- Test task dependencies and workflows
- Ensure no regression in previously completed functionality

## Examples

### Starting a New Task
```markdown
Before implementing "Update contract addresses with CCP details":
1. Check mvp-task-tracker.mdc Phase A status
2. Verify contract validation tasks are in correct order
3. Plan implementation approach
4. Update task to show work has started (optional)
5. Implement the feature
6. Test the implementation  
7. Mark task [x] when complete
```

### Discovering Additional Work
```markdown
If while implementing "Campaign Edit Form" you discover:
- Need additional validation logic
- Missing API endpoint
- Complex UI state management

Add sub-tasks or break down the original task for clarity
```

### Completing a Phase
```markdown
When all Phase A tasks are [x]:
1. Verify all functionality works together
2. Test integration between completed features
3. Update overall progress tracking
4. Plan Phase B + C start (can run parallel)
```

This rule ensures consistent, trackable progress toward MVP completion while maintaining code quality and project organization.
