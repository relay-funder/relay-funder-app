generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  fundingGoal     String
  startTime       DateTime
  endTime         DateTime
  creatorAddress  String
  status          String          @default("draft")
  transactionHash String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  campaignAddress String?         @unique
  slug            String          @unique
  location        String?
  treasuryAddress String?
  images          CampaignImage[]
  payments        Payment[]
  comments        Comment[]
  updates         CampaignUpdate[]

  @@index([creatorAddress])
}

model CampaignImage {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  isMainImage Boolean  @default(false)
  campaignId  Int
  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model User {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id              Int       @id @default(autoincrement())
  amount          String    // Store as string to preserve precision
  token           String    // e.g., "USDC"
  status          String    @default("pending") // pending, confirmed, failed
  transactionHash String?
  isAnonymous     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  campaignId      Int
  campaign        Campaign  @relation(fields: [campaignId], references: [id])
  userId          Int
  user            User      @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@index([userAddress])
}

model CampaignUpdate {
  id             Int      @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  campaignId     Int
  creatorAddress String
  campaign       Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}
