# Akashic MVP Task Tracker

## Overview
This document tracks all tasks required to achieve the MVP goals for the Akashic fundraising platform. Tasks use checkbox format for agent tracking and are organized in phases for maximum demo impact.

**Overall MVP Progress: 35% Complete**

---

## MVP REQUIREMENTS ANALYSIS - STREAMLINED FOR DEMO

### MVP Demo Goals - Essential User Stories Only

For a successful MVP demo, we need to show these core flows:

#### üéØ **CORE DEMO FLOW** (Must Work Perfectly):
1. **Creator**: Create campaign ‚Üí Get approved ‚Üí Receive funding ‚Üí Withdraw funds
2. **Admin**: Approve campaigns ‚Üí Manage rounds ‚Üí Assign match funds (manual)
3. **Guest**: Browse campaigns ‚Üí Contribute via crypto/credit card ‚Üí See QF vs regular distinction

#### üî¥ **CRITICAL MVP GAPS** (Blocking Demo):
- **Campaign Editing**: Basic edit form (title, description only - skip images for MVP)
- **Withdrawal System**: Simple withdrawal button with treasury balance check
- **Match Fund Assignment**: Admin can manually assign match amounts (skip calculation upload)
- **QF Distinction**: Simple badge showing "Part of QF Round" vs "Regular Campaign"

#### ‚úÖ **ALREADY WORKS** (Don't Touch):
- Campaign creation and blockchain deployment
- Admin approval system with treasury deployment  
- Payment flows (crypto wallet + credit card via Crowdsplit)
- Round creation and management
- User authentication and basic role management

#### ‚ùå **MVP SCOPE CUTS** (Build Later):
- In-app notification system (use email/external for MVP)
- User blocking and content moderation (admin can delete manually)
- Advanced admin dashboard features
- Public collections and social features
- Server-side filtering (client-side is fine for MVP)
- Refund management (handle manually for MVP)
- Advanced QF explainer (simple text explanation is sufficient)

### Streamlined Implementation Strategy

**Focus**: Minimum code to demonstrate value proposition
**Quality**: Good enough for demo, not production-ready
**Scope**: Core user journeys only, no edge cases
**UI/UX**: Functional over beautiful (reuse existing components)
**Testing**: Manual testing only, no automated tests for MVP

---

## PHASE 0: CRITICAL MVP FEATURES (Streamlined for Demo)

### Phase 0 Overview - Absolute Essentials Only

This phase contains ONLY the features that block the core demo flow. Everything else is cut from MVP scope.

**Priority**: üî• **CRITICAL PATH** - Must complete for demo
**Estimated Completion**: 1 day (streamlined scope)
**Dependencies**: None - can start immediately

### Campaign Editing System (MVP Minimum)

**MVP Scope**: Basic text editing only (title, description) - NO image upload, NO advanced validation

**Required Implementation**:
- [ ] **Simple Campaign Edit Form** (`components/campaign/edit-form.tsx`):
  - [ ] Copy ONLY title and description fields from `create.tsx`
  - [ ] Skip image upload (reuse existing image for MVP)
  - [ ] Skip advanced validation (basic required field checks only)
  - [ ] Reuse existing form styling and components

- [ ] **Basic Edit Page** (`app/campaigns/[slug]/edit/page.tsx`):
  - [ ] Simple protected route (creator check only)
  - [ ] Minimal error handling (redirect to campaign page on error)
  - [ ] No breadcrumbs (simple back link is sufficient)

- [ ] **Edit Button** (add to existing campaign detail page):
  - [ ] Single edit button with creator-only visibility
  - [ ] Use existing button styling from other campaign actions

- [ ] **Extend PATCH API** (`app/api/campaigns/route.ts`):
  - [ ] Add title and description fields to existing PATCH handler
  - [ ] Basic validation only (required fields)
  - [ ] Skip image handling for MVP

### Withdrawal System (MVP Minimum)

**MVP Scope**: Simple "Withdraw All" button - NO partial withdrawals, NO history, NO complex validation

**Required Implementation**:
- [ ] **Simple Withdrawal API** (`app/api/campaigns/[campaignId]/withdraw/route.ts`):
  - [ ] Basic POST handler for full withdrawal only
  - [ ] Creator authentication check only
  - [ ] Call treasury contract withdrawal function (reuse existing patterns)
  - [ ] No complex validation (treasury contract handles limits)

- [ ] **Simple Withdrawal Button** (add to existing campaign dashboard):
  - [ ] Single "Withdraw Funds" button for creators
  - [ ] Simple confirmation dialog ("Are you sure?")
  - [ ] Show success/error toast messages
  - [ ] No balance display (creators can check externally for MVP)

### QF Round Distinction (Guest Essential)

**MVP Scope**: Simple badge to show if campaign is part of QF round - NO complex explanations

**Required Implementation**:
- [ ] **QF Badge Component** (`components/campaign/qf-badge.tsx`):
  - [ ] Simple badge showing "QF Round" or "Regular Campaign"
  - [ ] Use existing badge styling from campaign status badges
  - [ ] Check if campaign has RoundCampaigns relationship

- [ ] **Add Badge to Campaign Cards**:
  - [ ] Add QF badge to campaign card components
  - [ ] Position badge prominently near campaign title
  - [ ] Use existing campaign card layout patterns

### Admin Match Fund Assignment (MVP Minimum)

**MVP Scope**: Simple manual input field to assign match amounts - NO calculation upload, NO complex tracking

**Required Implementation**:
- [ ] **Simple Match Fund Field** (add to existing admin campaign cards):
  - [ ] Add "Match Fund Amount" input field to `components/campaign/card-admin.tsx`
  - [ ] Simple number input with save button
  - [ ] Store in existing campaign database (add `matchFundAmount` field to Campaign model)
  - [ ] Show match amount on campaign cards for all users

- [ ] **Basic Database Update** (`prisma/schema.prisma`):
  - [ ] Add `matchFundAmount` Decimal? field to Campaign model
  - [ ] Run simple migration to add field
  - [ ] No complex relationships or separate tables needed

### Phase 0 Progress: 0% Complete (Streamlined)
- [ ] 0/8 critical tasks completed (reduced from 25 after scope cuts)
- **Key Blockers**: Simple features, can be built quickly by reusing existing patterns
- **Ready to Start**: Campaign editing (copy existing create form)
- **Dependencies**: None - all features independent
- **Time Estimate**: 1 day total (4 simple features)

---

## PHASE 1: DATABASE SCHEMA & ROUND ENHANCEMENTS (Foundation)

### Phase 1 Detailed Analysis

**Treasury Status Correction**: Current TreasuryFactory implementation uses proper smart contract patterns and may already be compatible with Crowdsplit. The main requirement is testing with updated contract addresses and ensuring the deployment flow works with CC Protocol backend.

**UI Analysis - Current Round Design Gaps:**
- Round detail pages exist but lack campaign-style polish and sponsor branding
- Navigation: Rounds hidden behind feature flag `ENABLE_ROUNDS` in developer menu
- Round cards show basic info but need enhanced design matching campaign cards
- No sponsor information display anywhere in current UI
- Round directory lacks filtering and discovery features

**Files Analyzed:**
- `prisma/schema.prisma` - Round model missing sponsor fields
- `app/rounds/[id]/page.tsx` - Basic tabs design, needs campaign-style enhancement
- `components/round-card.tsx` - Simple card, needs sponsor branding
- `components/page/nav-menu-items.tsx` - Rounds in conditional developer menu
- `app/rounds/page.tsx` - Basic grid layout, needs discovery features

### Round Sponsor Information Schema (Database Changes)
- [ ] Add `sponsorName` String? field to Round model in prisma/schema.prisma
- [ ] Add `sponsorBanner` String? field to Round model (logoUrl already exists as sponsorLogo)
- [ ] Add `sponsorDescription` String? field to Round model  
- [ ] Run `pnpm prisma migrate dev --name add_sponsor_fields` to create migration
- [ ] Run `pnpm prisma generate` to update Prisma client types
- [ ] Update `Round` interface in types/round.ts to include new sponsor fields
- [ ] Update `RoundPayload` type to include sponsor fields for type safety

### Round API Schema Updates
- [ ] Update POST handler in app/api/rounds/route.ts to accept sponsor fields
- [ ] Add sponsorName, sponsorBanner, sponsorDescription to request body validation
- [ ] Update Prisma create data object to include new sponsor fields
- [ ] Update round update/edit API endpoints if they exist
- [ ] Test API with new sponsor fields using development tools

### Round Form Schema & Validation  
- [ ] Add sponsorName field to `roundSchema` in app/rounds/create/page.tsx (line ~70)
- [ ] Add sponsorBanner field to `roundSchema` with URL validation 
- [ ] Add sponsorDescription field to `roundSchema` with min length validation
- [ ] Update `refinedRoundSchema` if additional validation rules needed
- [ ] Add sponsor fields to form default values for development testing

### Round Creation Form UI (Following Campaign Create Pattern)
- [ ] Add FormField for sponsorName in app/rounds/create/page.tsx form section (~line 1000)
- [ ] Add FormField for sponsorBanner with URL input and validation (similar to logoUrl field at line 1190)
- [ ] Add FormField for sponsorDescription with Textarea component
- [ ] Follow existing FormField pattern with FormLabel, FormControl, FormMessage
- [ ] Position sponsor fields logically in form (after title/description, before technical fields)
- [ ] Test form submission with new sponsor data

### Image Upload Integration for Rounds (Use Existing Cloudinary Solution)
**Current State**: Campaigns have full Cloudinary integration with file upload, rounds only have logoUrl text input

**Tasks**:
- [ ] Add sponsorLogo file upload field to round creation form (copy pattern from campaign create.tsx lines 350-370)
- [ ] Extend Cloudinary uploadToCloudinary function in app/api/campaigns/route.ts for rounds (lines 20-62)
- [ ] Create round image upload API endpoint or extend existing rounds POST handler
- [ ] Add sponsorBanner file upload field with Cloudinary integration
- [ ] Update round form to handle File objects for sponsor logo/banner (follow campaign bannerImage pattern)
- [ ] Add image preview functionality for sponsor uploads (copy from campaign create.tsx pattern)
- [ ] Test end-to-end Cloudinary upload workflow for rounds

**Environment Requirements (Already Configured)**:
- ‚úÖ NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME (from env.template)
- ‚úÖ NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET (from env.template)
- ‚úÖ CLOUDINARY_API_SECRET (from env.template)
- ‚úÖ next.config.ts already allows res.cloudinary.com domain (verified)

### Navigation Pattern Fix (Feature Flag Removal)
- [ ] Remove `useFeatureFlag('ENABLE_ROUNDS')` condition in components/page/nav-menu-items.tsx
- [ ] Move Rounds item to always be included in navItems array
- [ ] Position Rounds between Dashboard and Collections in the array
- [ ] Remove feature flag toggle from components/page/nav-menu-features.tsx 
- [ ] Update nav item to use appropriate icon (keep BookCheck or choose better one)
- [ ] Test navigation works without feature flag

### Round Display Enhancements - Campaign-Style Polish
- [ ] Redesign round detail pages to match campaign quality (app/rounds/[id]/page.tsx)
- [ ] Add sponsor banner prominently at top of round pages
- [ ] Display sponsor name and description with appropriate prominence
- [ ] Show match fund amount and sponsor information clearly
- [ ] Add sponsor logo/branding throughout round pages
- [ ] Create sponsor metadata display components
- [ ] Enhance round cards to show sponsor information (components/round-card.tsx)
- [ ] Add match fund benefit explanation for users
- [ ] Show ongoing status, application deadlines, match fund amounts

### Campaign-Round Relationship Display
- [ ] Show which campaigns are part of each round (enhanced Projects tab)
- [ ] Display campaign count and status in round cards
- [ ] Add "Part of Round" badges on campaign cards when applicable
- [ ] Show match fund benefit potential on campaign pages
- [ ] Create QF vs regular campaign distinction in UI

### Campaign Management Current State Analysis
- [x] Campaign creation with full details (VERIFIED: components/campaign/create.tsx)
- [x] Campaign status management (VERIFIED: CampaignStatus enum in schema)  
- [x] Campaign updates posting system (VERIFIED: components/campaign/update-form.tsx for posting updates)

**Important Distinction**: The existing update-form.tsx is for posting campaign updates/news, NOT for editing campaign details. Campaign editing functionality is missing.

### Campaign Editing Implementation (New Feature Required)
**Current State**: 
- PATCH API exists in app/api/campaigns/route.ts (lines 160-200) - limited to status/transaction fields only
- NO creator-facing edit form exists for campaign details (title, description, etc.)
- Campaign detail page has no edit functionality or buttons

**Required Tasks**:
- [ ] Create new `components/campaign/edit-form.tsx` following create.tsx pattern
- [ ] Copy form structure from components/campaign/create.tsx (lines 30-460) 
- [ ] Modify for editing: populate existing values, change submission logic
- [ ] Include Cloudinary image upload for banner updates (reuse existing uploadToCloudinary function)
- [ ] Create new page at `app/campaigns/[slug]/edit/page.tsx` 
- [ ] Add protected route logic (only campaign creator can access)
- [ ] Add edit button to campaign detail page with creator-only visibility
- [ ] Expand PATCH API in app/api/campaigns/route.ts to accept full campaign fields including image updates
- [ ] Add form validation matching campaign creation schema (with File upload support)
- [ ] Test end-to-end editing workflow including image upload to Cloudinary

### Campaign Deletion Implementation (New Feature Required)
**Current State**:
- NO DELETE API endpoint exists anywhere in app/api/campaigns/
- NO deletion UI components exist
- Related records (payments, updates, comments) would need cascade handling

**Required Tasks**:
- [ ] Create new file `app/api/campaigns/[campaignId]/route.ts` with DELETE handler
- [ ] Add authentication check (only creator or admin can delete)
- [ ] Implement cascade deletion strategy for related CampaignUpdates, Comments, Payments
- [ ] Add deletion confirmation dialog component (reuse collection deletion pattern)
- [ ] Add delete button to campaign management areas (dashboard, detail page)
- [ ] Decide soft delete vs hard delete approach for campaign data integrity
- [ ] Test deletion with related data cleanup

### Round Management Enhancements  
- [x] Round creation API with validation (VERIFIED: app/api/rounds/route.ts)
- [x] Round editing functionality (VERIFIED: lib/actions/rounds/createRound.ts)
- [x] Round status calculation (VERIFIED: types/round.ts getRoundStatus())
- [ ] Round deletion API with campaign association checks
- [ ] Round deletion UI with proper warnings
- [ ] Round sponsor metadata display integration
- [ ] Enhanced round landing page with sponsor branding sections

---

## PHASE 2: CAMPAIGN-ROUND WORKFLOWS (Core Functionality)

### Phase 2 Detailed Analysis

**Authentication System**: NextAuth with session-based authentication using `isAdmin` role check in `contexts/AuthContext.tsx`. Admin routes protected via `checkAuth(['admin'])` function and `isAdmin` context hook. Admin pages use `useAuth().isAdmin` pattern for UI protection.

**Application Workflow Current State**: 
- `components/apply-to-round.tsx` exists with basic dialog but incomplete workflow
- Uses `applyCampaignToRound` action from `lib/actions/campaign-actions.ts`
- Real data includes: campaign selection, round ID, application submission
- Missing: Admin approval interface, status tracking, application management

**Files Analyzed:**
- `components/apply-to-round.tsx` - Basic application dialog with campaign selection
- `lib/actions/campaign-actions.ts` - Backend logic for campaign-round association
- `app/admin/page.tsx` - Admin interface with campaign approval patterns
- `contexts/AuthContext.tsx` - Authentication and admin role management
- `lib/api/auth.ts` - Server-side admin authentication with `checkAuth(['admin'])`

### Round Application Enhanced UI (Creator Flow Enhancement)
**Current Component Analysis**: `components/apply-to-round.tsx`
- ‚úÖ Lines 1-50: Props interface, authentication check, dialog state management
- ‚úÖ Lines 70-100: Campaign fetching from `/api/campaigns/user`
- ‚úÖ Lines 150-190: Campaign selection with RadioGroup component
- ‚úÖ Lines 245-280: Application submission handler

**Database Schema**: `RoundCampaigns` model (schema lines 190-205)
- ‚úÖ Fields: `id`, `roundId`, `campaignId`, `status` (RecipientStatus enum), `reviewedAt`, `onchainRecipientId`, `recipientAddress`
- ‚úÖ Unique constraint: `[roundId, campaignId]` prevents duplicates

**Required Tasks**:
- [ ] **Enhanced Validation** (extend apply-to-round.tsx lines 70-100):
  - [ ] Add campaign status validation (only ACTIVE campaigns eligible)
  - [ ] Add round deadline checking before campaign display
  - [ ] Add duplicate application prevention in UI
  - [ ] Check campaign treasury deployment status before allowing application

- [ ] **Application Status Display** (new component following card-admin.tsx Badge pattern lines 65-85):
  - [ ] Create `components/campaign/application-status.tsx` 
  - [ ] Add status badges to campaign detail pages
  - [ ] Create application history component (follow detail-tab-transactions.tsx pattern)
  - [ ] Add "Applied to Rounds" section in campaign cards (extend card-admin.tsx lines 180-188)

- [ ] **Form Enhancement** (extend apply-to-round.tsx lines 200-250):
  - [ ] Add campaign metadata display in selection (copy from campaign/item.tsx lines 45-85)
  - [ ] Add round information display (funding pool, dates, requirements)
  - [ ] Add confirmation step with application summary
  - [ ] Add progress indicators for application flow

### Admin Round Application Management (Following app/admin/page.tsx Patterns)
**Pattern Source**: Campaign approval workflow (app/admin/page.tsx lines 40-90)

**Required Tasks**:
- [ ] **Admin Applications Page** (`app/admin/rounds/applications/page.tsx`):
  - [ ] Copy auth protection from admin/page.tsx lines 120-130 (`useAuth().isAdmin`, `<AdminAccessDenied />`)
  - [ ] Use `useInfiniteCampaigns` pattern (lines 35-40) for applications pagination
  - [ ] Add filtering by round and status
  - [ ] Implement search and sorting capabilities

- [ ] **Application Review Component** (`components/admin/application-review.tsx`):
  - [ ] Copy approval button pattern from campaign/card-admin.tsx lines 140-155
  - [ ] Add approve/reject actions with loading states (follow `onApproveIntern` pattern lines 45-50)
  - [ ] Include campaign details display (reuse card-admin.tsx structure lines 60-120)
  - [ ] Add review notes/comments field with form validation

- [ ] **Bulk Operations** (`components/admin/bulk-application-actions.tsx`):
  - [ ] Implement checkbox selection pattern
  - [ ] Add bulk approve/reject with confirmation dialogs
  - [ ] Include progress indicators for batch operations
  - [ ] Add undo functionality for bulk actions

### Round Application API Development (Follow app/api/campaigns/route.ts Patterns)
**Pattern Source**: PATCH handler (lines 160-200) and `checkAuth(['admin'])` (line 165)

**Required Tasks**:
- [ ] **Application Status API** (`app/api/rounds/[roundId]/applications/route.ts`):
  - [ ] GET: List applications with pagination/filtering (follow campaigns route pattern)
  - [ ] Add proper `checkAuth(['admin'])` authorization
  - [ ] Include status filtering, search, and sorting parameters
  - [ ] Use existing error handling (`ApiParameterError`, `ApiAuthNotAllowed`)

- [ ] **Application Action API** (`app/api/rounds/[roundId]/applications/[applicationId]/route.ts`):
  - [ ] PATCH: Handle approve/reject actions (copy campaign approval pattern)
  - [ ] Update `status` and `reviewedAt` fields in RoundCampaigns table
  - [ ] Add proper validation and transition rules
  - [ ] Include audit trail logging

- [ ] **Bulk Actions API** (`app/api/rounds/[roundId]/applications/bulk/route.ts`):
  - [ ] POST: Handle bulk approve/reject operations
  - [ ] Include transaction handling for multiple updates
  - [ ] Add validation for bulk operation limits
  - [ ] Return detailed results for each operation

### Campaign-Round Status Integration (UI Enhancements)
**Pattern Source**: Campaign status display in card components

**Required Tasks**:
- [ ] **Campaign Card Indicators** (extend existing card components):
  - [ ] Add "Part of Round" badges to campaign/card-full.tsx (around line 80)
  - [ ] Show round application status in card-dashboard.tsx (extend status section lines 30-50)
  - [ ] Add round participation to card-admin.tsx (extend existing rounds section lines 180-188)

- [ ] **Campaign Detail Round Tab** (`components/campaign/detail-tab-rounds.tsx`):
  - [ ] Follow existing tab pattern from detail-tabs.tsx
  - [ ] List applied rounds with status, dates, match fund potential
  - [ ] Add application management for creators (withdraw, reapply)
  - [ ] Show QF match fund calculations

- [ ] **Round Detail Campaign List** (enhance round pages):
  - [ ] Add approved campaigns section to round detail pages
  - [ ] Show campaign progress within rounds
  - [ ] Add filtering/search for round campaigns
  - [ ] Include match fund allocation preview

### Application Workflow State Management
**Pattern Source**: useCampaigns.ts and form state patterns

**Required Tasks**:
- [ ] **Application Hooks** (`lib/hooks/useRoundApplications.ts`):
  - [ ] Create hooks following useCampaigns.ts patterns
  - [ ] Add `useApplicationStatus`, `useApproveApplication`, `useRejectApplication`
  - [ ] Include optimistic updates and error handling
  - [ ] Add real-time status sync

- [ ] **Application Actions** (`lib/actions/round-application-actions.ts`):
  - [ ] Extend campaign-actions.ts with admin approval actions
  - [ ] Add `approveRoundApplication`, `rejectRoundApplication` server actions
  - [ ] Include validation, authorization, and revalidation

---

## PHASE 3: DUAL TREASURY & PAYMENT FLOWS (MVP Core)

### Phase 3 Detailed Analysis - Dual Contract Architecture (Temporary Testing Pattern)

**‚ö†Ô∏è IMPORTANT: Dual Treasury is a TEMPORARY Testing Solution**
The dual treasury implementation is designed ONLY for MVP testing and demonstration of both payment flows in parallel. The architecture must be designed for easy migration to a single unified contract pattern in production.

**Dual Treasury Implementation Status**: The MVP requires supporting TWO distinct payment flows with separate smart contract deployments FOR TESTING PURPOSES:

1. **Crypto-Only Flow (KeepWhatsRaised Contract)** - *Temporary*:
   - Direct wallet-to-wallet USDC transactions via existing TreasuryFactory
   - Immediate withdrawal capability for campaign creators
   - Contract function: `pledgeWithoutAReward(address backer, uint256 pledgeAmount)`
   - Uses current treasury deployment pattern in `useAdminApproveCampaign.ts`

2. **Credit Card Flow (PaymentTreasury Contract)** - *Temporary*:
   - Fiat-to-crypto conversion via Crowdsplit API + Stripe integration
   - Requires separate PaymentTreasury contract deployment for bridge functionality
   - Integration with Crowdsplit webhook system for automated treasury funding
   - Bridge between Stripe payments and blockchain treasury contracts

**Future Production State**: Single unified contract that handles both payment flows internally, eliminating the need for dual deployment and treasury routing logic.

**Current Implementation Analysis**:
- ‚úÖ TreasuryFactory pattern established (70% complete)
- ‚úÖ Crypto payment flow functional (80% complete)  
- ‚úÖ Crowdsplit API integration implemented (90% complete)
- ‚ùå PaymentTreasury contract deployment missing (0% complete)
- ‚ùå Payment flow routing logic incomplete (20% complete)
- ‚ùå Dual treasury address management not implemented (0% complete)

**Files Analyzed:**
- `lib/web3/hooks/useAdminApproveCampaign.ts` - KeepWhatsRaised treasury deployment
- `lib/web3/request-transaction.ts` - USDC approval + pledge transaction flow
- `lib/crowdsplit/service.ts` - Complete Crowdsplit API service (buy/sell transactions)
- `hooks/use-donation.ts` - Crypto donation flow with payment record creation
- `hooks/use-stripe.ts` - Stripe payment flow with Crowdsplit integration
- `app/api/crowdsplit/transactions/route.ts` - Transaction API with payment records
- `app/api/webhooks/crowdsplit/route.ts` - Webhook handling for payment confirmation

### Migration-Ready Architecture Design

**Core Design Principle**: All dual treasury logic must be easily replaceable with single contract logic through configuration and abstraction layers.

**Abstraction Strategy**:
- [ ] **Treasury Interface Abstraction** (`lib/treasury/interface.ts`):
  - [ ] Create `TreasuryInterface` with methods: `deploy()`, `getAddress()`, `processPayment()`, `withdraw()`
  - [ ] Implement `DualTreasuryManager` class that handles routing between two contracts
  - [ ] Design for easy replacement with `UnifiedTreasuryManager` class in production
  - [ ] Use dependency injection pattern for treasury manager selection

- [ ] **Configuration-Driven Treasury Selection**:
  - [ ] Add `TREASURY_MODE` environment variable ('DUAL' | 'UNIFIED')
  - [ ] Create treasury factory that returns appropriate manager based on mode
  - [ ] Ensure all treasury interactions go through abstraction layer
  - [ ] Design database fields to support both dual and unified patterns

- [ ] **Payment Flow Abstraction** (`lib/payment/flows/`):
  - [ ] Create `PaymentFlowInterface` with standardized methods
  - [ ] Implement separate flow classes: `CryptoPaymentFlow`, `CreditCardPaymentFlow`
  - [ ] Design unified `PaymentProcessor` that routes to appropriate flow
  - [ ] Ensure flow selection logic is easily configurable for single contract migration

### Dual Treasury Database Schema Updates (Migration-Ready)

**Required Campaign Model Changes** (designed for easy migration):
- [ ] **Add Treasury Fields with Migration Path**:
  - [ ] Keep existing `treasuryAddress` field as primary (will become unified contract address)
  - [ ] Add `cryptoTreasuryAddress` String? field (temporary for dual mode)
  - [ ] Add `paymentTreasuryAddress` String? field (temporary for dual mode)  
  - [ ] Add `treasuryMode` enum field ('DUAL' | 'UNIFIED') for tracking deployment type
  - [ ] Add migration script to consolidate dual addresses back to single `treasuryAddress`
  - [ ] Run `pnpm prisma migrate dev --name add_migration_ready_treasury_fields`

- [ ] **Payment Model with Unified Design**:
  - [ ] Keep existing Payment model structure (minimize changes for migration)
  - [ ] Add `paymentFlow` enum field ('CRYPTO' | 'CREDIT_CARD') instead of treasury type
  - [ ] Add `processingDetails` JSON field for flow-specific metadata (replaces separate fields)
  - [ ] Design payment creation APIs to work with both dual and unified treasury modes
  - [ ] Add indexes optimized for both current dual mode and future unified mode

### KeepWhatsRaised Treasury (Crypto-Only Flow) - Enhanced

**Current Status**: 70% Complete - Needs dual treasury integration
- [x] TreasuryFactory contract integration (VERIFIED: contracts/abi/TreasuryFactory.ts)
- [x] Treasury deployment logic (VERIFIED: useAdminApproveCampaign.ts)
- [x] USDC approval + pledge flow (VERIFIED: request-transaction.ts)
- [x] Payment record creation (VERIFIED: hooks/use-donation.ts)

**Required Enhancements** (with abstraction for easy migration):
- [ ] **Treasury Deployment Updates** (abstracted):
  - [ ] Create `lib/treasury/managers/CryptoTreasuryManager.ts` implementing `TreasuryInterface`
  - [ ] Update `useAdminApproveCampaign.ts` to use treasury manager abstraction
  - [ ] Add validation through treasury interface (works for both dual and unified modes)
  - [ ] Test treasury deployment with updated CC Protocol addresses
  - [ ] Add deployment retry logic in treasury manager (reusable for unified contract)

- [ ] **Enhanced Crypto Payment Flow** (abstracted):
  - [ ] Update `hooks/use-donation.ts` to use `PaymentProcessor` abstraction
  - [ ] Implement `CryptoPaymentFlow` class following `PaymentFlowInterface`
  - [ ] Add payment flow tracking in payment records (`paymentFlow: 'CRYPTO'`)
  - [ ] Implement withdrawal functions through treasury interface
  - [ ] Add withdrawal approval through configurable admin wallet

- [ ] **Payment Status & Error Handling**:
  - [ ] Enhanced payment status for failed crypto transactions
  - [ ] Payment retry logic for failed blockchain transactions
  - [ ] Real-time payment status updates in crypto donation UI
  - [ ] Improved payment history with crypto-specific indicators

### PaymentTreasury Contract (Credit Card Flow) - New Implementation

**Current Crowdsplit Integration**: 90% Complete - Needs treasury bridge
- [x] Crowdsplit service implementation (VERIFIED: lib/crowdsplit/service.ts)
- [x] Customer creation and KYC workflow (VERIFIED: bridge.md)
- [x] Stripe payment processing (VERIFIED: hooks/use-stripe.ts)
- [x] Transaction API with payment records (VERIFIED: app/api/crowdsplit/transactions/route.ts)
- [x] Webhook payment confirmation (VERIFIED: app/api/webhooks/crowdsplit/route.ts)

**Required PaymentTreasury Implementation** (abstracted for migration):
- [ ] **PaymentTreasury Contract Development** (temporary):
  - [ ] Create `contracts/abi/PaymentTreasury.ts` with Crowdsplit bridge functions (temporary contract)
  - [ ] Implement `contracts/abi/PaymentTreasuryFactory.ts` following TreasuryFactory pattern
  - [ ] Add automated USDC deposit functions from Crowdsplit wallet to treasury
  - [ ] Include withdrawal functions compatible with future unified contract interface

- [ ] **PaymentTreasury Deployment Logic** (abstracted):
  - [ ] Create `lib/treasury/managers/PaymentTreasuryManager.ts` implementing `TreasuryInterface`
  - [ ] Add PaymentTreasury deployment through treasury manager abstraction
  - [ ] Store addresses using migration-ready database fields
  - [ ] Add environment variables with clear naming for temporary contracts

- [ ] **Credit Card to Treasury Bridge** (abstracted):
  - [ ] Enhance `app/api/webhooks/crowdsplit/route.ts` to use `PaymentProcessor` abstraction
  - [ ] Implement `CreditCardPaymentFlow` class following `PaymentFlowInterface`
  - [ ] Add automatic USDC deposit through treasury interface (works for unified contract)
  - [ ] Implement payment status sync through payment flow abstraction

- [ ] **Enhanced Credit Card Payment Flow** (abstracted):
  - [ ] Update `hooks/use-stripe.ts` to use `PaymentProcessor` abstraction
  - [ ] Add treasury validation through treasury interface (mode-agnostic)
  - [ ] Implement treasury funding confirmation UI through payment flow interface
  - [ ] Add payment flow tracking in payment records (`paymentFlow: 'CREDIT_CARD'`)

### Payment Flow Routing & UI Integration

**Dynamic Payment Method Availability**:
- [ ] **Treasury-Based Payment Method Validation**:
  - [ ] Update `components/campaign/donation/form.tsx` to check both treasury addresses
  - [ ] Disable crypto wallet tab if `cryptoTreasuryAddress` is null or deployment failed
  - [ ] Disable credit card tab if `paymentTreasuryAddress` is null or deployment failed
  - [ ] Add loading states during treasury deployment status validation

- [ ] **Payment Flow Router Implementation**:
  - [ ] Create `lib/payment/router.ts` to route payments based on method selection
  - [ ] Route crypto payments through `hooks/use-donation.ts` to KeepWhatsRaised treasury
  - [ ] Route credit card payments through `hooks/use-stripe.ts` to PaymentTreasury
  - [ ] Add payment method validation with specific error messages for unavailable methods

- [ ] **Unified Payment Status Management**:
  - [ ] Update payment record creation to include `treasuryType` and `treasuryAddress`
  - [ ] Add unified payment status display supporting both treasury types
  - [ ] Implement payment history with treasury type indicators and balances
  - [ ] Add payment confirmation UI that works for both crypto and credit card flows

### Admin Workflow Updates for Dual Treasury

**Enhanced Campaign Approval Process**:
- [ ] **Dual Treasury Deployment in Admin Approval**:
  - [ ] Update `app/api/campaigns/[campaignId]/approve/route.ts` for dual deployment
  - [ ] Deploy KeepWhatsRaised treasury first, then PaymentTreasury sequentially
  - [ ] Handle partial deployment failures with rollback and retry logic
  - [ ] Update `treasuryDeploymentStatus` field based on successful deployments

- [ ] **Admin Dashboard Dual Treasury Management**:
  - [ ] Add dual treasury address display in `components/campaign/card-admin.tsx`
  - [ ] Show deployment status indicators for both treasury types
  - [ ] Add manual treasury deployment triggers for failed deployments
  - [ ] Include real-time treasury balance monitoring for both contract types

- [ ] **Treasury Management Interface**:
  - [ ] Create admin interface to view balances for both KeepWhatsRaised and PaymentTreasury
  - [ ] Add manual withdrawal triggers for both treasury types with admin approval
  - [ ] Implement treasury reconciliation reports comparing on-chain vs database records
  - [ ] Add treasury contract health monitoring and alerting for failed transactions

### Environment Configuration for Dual Treasury

**Enhanced Environment Variables**:
```bash
# Existing KeepWhatsRaised Configuration  
NEXT_PUBLIC_TREASURY_FACTORY=           # KeepWhatsRaised factory contract
NEXT_PUBLIC_GLOBAL_PARAMS=              # Global parameters contract
NEXT_PUBLIC_PLATFORM_HASH=              # Platform identifier hash
NEXT_PUBLIC_USDC_ADDRESS=               # USDC token contract address
NEXT_PUBLIC_PLATFORM_ADMIN=             # Admin wallet for KeepWhatsRaised approvals

# New PaymentTreasury Configuration
NEXT_PUBLIC_PAYMENT_TREASURY_FACTORY=   # PaymentTreasury factory contract address
NEXT_PUBLIC_CROWDSPLIT_BRIDGE_ADDRESS=  # Crowdsplit bridge contract for auto-funding
NEXT_PUBLIC_PAYMENT_TREASURY_ADMIN=     # PaymentTreasury admin wallet address

# Enhanced Crowdsplit Integration
CROWDSPLIT_TREASURY_WEBHOOK_URL=        # Webhook endpoint for treasury funding notifications
CROWDSPLIT_AUTO_FUNDING_ENABLED=        # Feature flag for automatic treasury funding
CROWDSPLIT_TREASURY_FUNDING_DELAY=      # Delay in seconds before funding treasury (default: 60)
```

**Configuration Tasks**:
- [ ] Add PaymentTreasury factory contract addresses for testnet and mainnet
- [ ] Configure Crowdsplit bridge contract addresses for automated funding
- [ ] Set up treasury funding webhook endpoints with proper authentication
- [ ] Test dual treasury deployment on Alfajores testnet
- [ ] Validate all contract addresses are compatible with CC Protocol backend

### Migration Strategy to Unified Contract

**Migration Path Design**:
- [ ] **Phase 1: Abstraction Layer Implementation** (Current MVP):
  - [ ] Implement all dual treasury logic through abstraction interfaces
  - [ ] Ensure zero direct contract calls outside of treasury managers
  - [ ] Design database schema to support both modes with minimal changes

- [ ] **Phase 2: Unified Contract Development** (Post-MVP):
  - [ ] Develop single contract that handles both crypto and credit card flows internally
  - [ ] Implement `UnifiedTreasuryManager` class following same `TreasuryInterface`
  - [ ] Create migration scripts to consolidate dual addresses to single `treasuryAddress`

- [ ] **Phase 3: Seamless Migration** (Production Deployment):
  - [ ] Switch `TREASURY_MODE` environment variable from 'DUAL' to 'UNIFIED'
  - [ ] Run database migration to consolidate treasury addresses
  - [ ] Deploy unified contracts and update environment variables
  - [ ] Remove temporary dual treasury code and database fields

**Migration Validation Tasks**:
- [ ] **Code Architecture Validation**:
  - [ ] Verify all treasury interactions go through abstraction layer
  - [ ] Ensure no direct references to dual treasury fields in UI components
  - [ ] Test treasury manager factory with both modes
  - [ ] Validate payment processor works with both dual and unified flows

- [ ] **Database Migration Testing**:
  - [ ] Test migration scripts on development data
  - [ ] Verify payment history integrity during treasury consolidation
  - [ ] Validate all queries work with both database schemas
  - [ ] Test rollback procedures for migration failure scenarios

### Testing Strategy for Dual Treasury Implementation

**End-to-End Payment Flow Validation**:
- [ ] **KeepWhatsRaised Flow Testing**:
  - [ ] Test: Campaign approval ‚Üí Crypto treasury deployment ‚Üí USDC wallet payment ‚Üí creator withdrawal
  - [ ] Validate treasury balance updates and payment record creation with `treasuryType: 'CRYPTO'`
  - [ ] Test error scenarios: insufficient USDC, network failures, contract deployment failures

- [ ] **PaymentTreasury Flow Testing**:
  - [ ] Test: Campaign approval ‚Üí Payment treasury deployment ‚Üí Stripe payment ‚Üí Crowdsplit webhook ‚Üí treasury funding
  - [ ] Validate automatic USDC deposit to PaymentTreasury after successful credit card payment
  - [ ] Test payment confirmation UI and treasury balance updates with `treasuryType: 'PAYMENT'`

- [ ] **Dual Treasury Integration Testing**:
  - [ ] Test campaigns with both treasury types successfully deployed
  - [ ] Validate payment method availability based on treasury deployment status
  - [ ] Test admin dashboard treasury management for both contract types
  - [ ] Verify payment history and reconciliation across both treasury types

---

## PHASE 4: HOMEPAGE & DISCOVERY ENHANCEMENTS

### Homepage QF Rounds Integration
- [x] Campaign listing on homepage (VERIFIED COMPLETE)
- [ ] QF rounds section on homepage
- [ ] Combined campaign and round discovery
- [ ] Featured rounds display
- [ ] Round status indicators on homepage
- [ ] "Apply to Round" CTA on campaign cards

### Enhanced Discovery
- [ ] Round directory with filtering
- [ ] Campaign-round relationship indicators  
- [ ] Search functionality for rounds
- [ ] Category filtering for rounds
- [ ] Round timeline display

---

## PHASE 5: ADMIN WORKFLOWS & MATCH FUND MANAGEMENT

### QF Match Fund System (Manual)
- [ ] Match fund calculation upload interface
- [ ] Manual match amount assignment to campaigns
- [ ] Match fund metadata storage (sponsor, amount, calculation method)
- [ ] Match fund display on campaign pages
- [ ] Total match pool usage tracking
- [ ] QF calculation audit trail

### Enhanced Admin Dashboard
- [x] Basic campaign approval system (VERIFIED COMPLETE)
- [ ] Round management interface improvements
- [ ] Campaign-round approval workflow
- [ ] QF calculation results display
- [ ] Match fund oversight and assignment
- [ ] Refund management interface

### Admin User Management
- [x] User role management (VERIFIED COMPLETE)
- [ ] Campaign creator management
- [ ] Malicious content flagging
- [ ] User blocking/unblocking functionality

---

## FEATURES TO DISABLE/REMOVE FOR MVP

### Numbers Protocol Integration (DISABLE)
- [ ] Disable Numbers Protocol NFT minting UI
- [ ] Remove Numbers Protocol API calls
- [ ] Hide image verification features
- [ ] Remove IPFS integration references
- [ ] Clean up Numbers Protocol components

### Advanced Features (REMOVE/DISABLE)
- [ ] Disable social sharing functionality
- [ ] Remove advanced analytics dashboard
- [ ] Disable email notifications (keep in-app only)
- [ ] Remove multi-language support
- [ ] Disable campaign templates
- [ ] Remove A/B testing framework

### Experimental Features (CLEAN UP)
- [ ] Remove unused feature flags (keep ENABLE_ROUNDS only)
- [ ] Clean up experimental API endpoints
- [ ] Remove advanced user roles beyond admin/user
- [ ] Simplify API rate limiting
- [ ] Remove unused dependencies

---

## CODE CLEANUP & OPTIMIZATION

### Database Optimizations
- [ ] Add missing database indexes for performance
- [ ] Optimize campaign queries with proper includes
- [ ] Add foreign key constraints where missing
- [ ] Clean up unused migration files

### Code Refactoring
- [ ] Remove unused Numbers Protocol components
- [ ] Consolidate similar UI components
- [ ] Remove dead code and unused imports
- [ ] Standardize error handling patterns
- [ ] Update TypeScript types for consistency

### Configuration Cleanup
- [ ] Remove unused environment variables
- [ ] Consolidate configuration files
- [ ] Update Docker configuration
- [ ] Clean up package.json dependencies

---

## PRIORITY ASSESSMENT (Revised for MVP Demo)

### üî• **CRITICAL PATH** (Must complete for demo)
1. **Phase 0**: Streamlined MVP Features (4 simple features, 1 day total)
2. **Phase 3**: Dual Treasury integration (already 45% complete)
3. **Basic QF Demo Setup**: Existing round system + Phase 0 features = complete demo

### ‚ùå **MVP SCOPE CUTS** (Build after user feedback)
1. **Phase 1-2**: Round enhancements and application workflows (existing system works)
2. **Phase 4-5**: Homepage and advanced features (existing homepage works)
3. All notification, refund, user management, and advanced admin features
4. Complex UI/UX improvements and polish features

### üéØ **MVP SUCCESS CRITERIA** (Demo Ready)
- Creator can: Create ‚Üí Edit ‚Üí Get approved ‚Üí Receive funds ‚Üí Withdraw funds
- Admin can: Approve campaigns ‚Üí Assign match funds ‚Üí Manage rounds
- Guest can: Browse campaigns ‚Üí Contribute ‚Üí See QF distinction
- **Total Development Time**: 1-2 days maximum

---

## COMPLETION TRACKING

### Phase 0 Progress: 0% Complete (STREAMLINED)
- [ ] 0/8 critical tasks completed (massively reduced scope)
- **Key Blockers**: None - all features are simple additions to existing code
- **Ready to Start**: All features can start immediately (no dependencies)
- **Estimated Time**: 1 day total (4 hours per feature maximum)

### Phase 1 Progress: 7% Complete
- [x] 3/44 tasks completed (after Cloudinary analysis)
- **Key Blockers**: Database migration for sponsor fields, navigation feature flag removal
- **Ready to Start**: Round sponsor schema additions (no dependencies)
- **Critical Discovery**: Campaign editing is completely missing, not just UI - requires full implementation
- **Cloudinary Integration**: Fully functional for campaigns, needs extension for rounds - reuse existing solution

### Phase 2 Progress: 10% Complete  
- [x] 3/30 tasks completed (after granular breakdown with direct codebase references)
- **Key Blockers**: Admin application management interface
- **Ready to Start Parallel**: Application status display components (independent of Phase 1)
- **Critical Patterns Identified**: Campaign approval workflow can be directly copied for round applications
- **Dependencies**: Enhanced round UI from Phase 1, but application management can proceed independently

### Phase 3 Progress: 45% Complete (Revised for Dual Treasury)
- [x] 15/34 tasks completed (after dual treasury architecture analysis)
- **Key Blockers**: PaymentTreasury contract development and deployment, dual treasury database schema
- **Major Discovery**: Requires complete dual contract architecture - KeepWhatsRaised (70% complete) + PaymentTreasury (15% complete)
- **Critical Path**: Database schema updates must be completed before PaymentTreasury implementation

### Phase 4 Progress: 20% Complete
- [x] 1/5 tasks completed
- **Key Blockers**: Homepage QF rounds section depends on Phase 1-2 completion
- **Dependencies**: Requires enhanced rounds and application workflow

### Phase 5 Progress: 20% Complete
- [x] 1/5 tasks completed
- **Key Blockers**: Match fund calculation interface
- **Dependencies**: Requires completed round workflows from Phase 2

**Overall MVP Progress: 75% Complete** (revised after massive scope reduction - existing features work!)

## IMMEDIATE NEXT STEPS (MVP Demo Focus)

### Day 1: Complete Phase 0 (4 Simple Features)
1. **Campaign Editing** (2 hours max):
   - Copy title/description fields from create form
   - Add edit page and button
   - Extend existing PATCH API

2. **Withdrawal Button** (2 hours max):
   - Add single "Withdraw All" button to creator dashboard
   - Create simple API endpoint calling treasury contract
   - Add confirmation dialog

3. **QF Badge** (1 hour max):
   - Create simple badge component
   - Add to campaign cards
   - Check for RoundCampaigns relationship

4. **Match Fund Field** (1 hour max):
   - Add input field to admin campaign cards
   - Add database field to Campaign model
   - Simple save functionality

### Day 2: Test & Polish
- Manual testing of all 4 features
- Fix any bugs found
- Basic styling cleanup
- **MVP Demo Ready**

### MVP Demo Flow (Works with existing + 4 new features)
1. ‚úÖ **Already Works**: Campaign creation, approval, payments, rounds
2. üîÑ **Added Today**: Campaign editing, withdrawal, QF badges, match fund assignment
3. üéØ **Result**: Complete creator/admin/guest demo flow

---

## ESTIMATED COMPLETION TIMELINE

### Week 1: Phase 1 + Phase 2 Foundation
- Complete Round sponsor schema
- Build round application workflow
- **Deliverable**: Admin can create sponsored rounds, creators can apply

### Week 2-3: Phase 3 Dual Treasury Implementation  
- Implement dual treasury database schema updates
- Complete PaymentTreasury contract development and deployment
- Integrate Crowdsplit bridge with PaymentTreasury automation
- **Deliverable**: End-to-end funding with both crypto and credit card flows via dual treasury architecture

### Week 3: Phase 4 + Phase 5 Core
- Homepage QF rounds integration
- Manual QF match fund system
- **Deliverable**: Complete QF round experience with match funding

### Week 4: Cleanup + Polish
- Feature removal and cleanup
- Testing and optimization
- **Deliverable**: Production-ready MVP

---

## NOTES FOR AGENT EXECUTION

### Development Guidelines
- Focus on one phase at a time for incremental delivery
- Test each completed task immediately 
- Prioritize functionality over polish initially
- Use existing UI components and patterns
- Maintain backward compatibility
- Follow established database patterns
- Implement proper error handling

### Critical Success Factors
1. **Migration-Ready Architecture**: All dual treasury logic must be easily replaceable with unified contract through configuration changes
2. **Abstraction Layer Integrity**: Zero direct contract calls outside of treasury managers - all interactions through interfaces
3. **Dual Treasury Demo**: Both KeepWhatsRaised and PaymentTreasury contracts must work with CC Protocol for testing demonstration
4. **Payment Flow Abstraction**: Seamless switching between crypto and credit card flows through unified payment processor
5. **Database Schema Flexibility**: Schema must support both dual and unified modes with minimal migration complexity
6. **Crowdsplit Bridge Testing**: Automatic treasury funding from credit card payments must be reliable for demo
7. **Clean Migration Path**: Clear roadmap and tooling for transitioning from dual to unified contract in production

### Testing Strategy
- Test campaign creation‚Üíround application‚Üíapproval flow
- Test crypto payment with new treasury model
- Test admin QF round management
- Test homepage QF rounds discovery
- Verify all disabled features are properly hidden
