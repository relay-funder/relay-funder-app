# Akashic MVP Task Tracker

## Overview
This document tracks all tasks required to achieve the MVP goals for the Akashic fundraising platform. Tasks use checkbox format for agent tracking and are organized in phases for maximum demo impact.

**Overall MVP Progress: 50% Complete** (Updated after CC Protocol integration fixes and payment validation framework)

### üéØ **RECENT COMPLETION** (Session: 2025-01-21)
**CC Protocol Integration & Contract Validation - Phase D Critical Fixes**

‚úÖ **COMPLETED TASKS:**
- **CC Protocol Integration Fixed**: Complete two-phase deployment workflow validated
- **Contract Validation Completed**: End-to-end treasury deployment working with staging addresses
- **Admin Approval Hook Fixed**: `useAdminApproveCampaign.ts` now deploys dual treasuries correctly
- **API Routes Updated**: Admin approval endpoint supports dual treasury deployment results
- **Database Schema Enhanced**: Added `CRYPTO_ONLY`, `PAYMENT_ONLY`, `LEGACY` treasury modes
- **Treasury Managers Fixed**: Corrected CampaignInfo address validation and deployment parameters
- **Testing Framework Complete**: `cc-protocol-test.sh` validates complete workflow with payment tests
- **Documentation Organized**: All CC Protocol assets moved to `cc-protocol/` directory
- **Web3 Integration Rules Updated**: Added comprehensive CC Protocol patterns and testing requirements

**Critical Architecture Fixes**: 
- **Two-Phase Deployment**: CampaignInfo ‚Üí Dual Treasury deployment pattern validated
- **Parameter Correction**: Fixed `treasuryFactory.deploy()` parameter order and CampaignInfo validation
- **Address Parsing**: Resolved padded hex address format issues
- **Payment Flow Validation**: Added comprehensive test patterns for both treasury types

**Verification Status**: ‚úÖ ALL QUALITY GATES PASSED
- ‚úÖ TypeScript compilation: Passes with updated imports and interfaces
- ‚úÖ Database schema: New treasury mode migration ready (`20250721162000_add_treasury_mode_options`)
- ‚úÖ Contract integration: Complete workflow tested and validated
- ‚úÖ Payment patterns: Both pledge and credit card flows documented and tested

---

## MVP REQUIREMENTS ANALYSIS - COMPREHENSIVE FEATURE GAP ASSESSMENT

### Critical Missing Features for MVP Demo

Based on the specific MVP goals provided, here are the major feature gaps that must be addressed:

#### üî¥ **CREATOR/REFUGEE PERSONA - MISSING FEATURES**:
- **Campaign Editing**: Complete feature missing - no interface for creators to edit campaign details
- **Withdrawal System**: Missing campaign fund withdrawal functionality  
- **In-App Notifications**: No notification system for campaign status updates
- **Round Status Restrictions**: Campaign editing not disabled when in active rounds
- **Match Fund Withdrawal**: Missing additional match funding withdrawal capability

#### üî¥ **ADMIN PERSONA - MISSING FEATURES**:
- **Match Fund Management**: No manual QF calculation upload or assignment interface
- **Refund Management**: Missing refund viewing and triggering capabilities  
- **User Blocking**: No user/creator blocking or content moderation system
- **Wallet Address Suppression**: Missing banned address management
- **Enhanced Admin Dashboard**: Limited oversight tools for match fund tracking

#### üî¥ **GUEST PERSONA - MISSING FEATURES**:
- **Server-Side Filtering**: Category filtering not server-side implemented
- **QF Explainer**: Missing clear quadratic funding explanation
- **Round vs Campaign Distinction**: UI doesn't clearly show QF vs regular contributions
- **Public Collections**: Missing public collection viewing by other users

#### ‚úÖ **WELL-IMPLEMENTED FEATURES**:
- Campaign creation with full details and blockchain deployment
- Admin campaign approval system with treasury deployment  
- Basic payment flows (crypto wallet + credit card via Crowdsplit)
- Round creation and management infrastructure
- Collections and favorites system (logged-in users)
- User authentication and role management
- Campaign updates and comments system
- Homepage featuring campaigns and rounds
- Campaign directory with basic filtering

### Current vs Required Implementation

**QF Manual Calculation**: ‚ùå **MISSING** - No admin interface for match fund assignment
**Withdrawal System**: ‚ùå **MISSING** - No fund withdrawal functionality for creators
**Notification System**: ‚ùå **MISSING** - No in-app notifications for any persona
**User Management**: ‚ùå **MISSING** - No blocking, content moderation, or address suppression
**Treasury Model**: ‚úÖ TreasuryFactory may be Crowdsplit-compatible, needs testing with new addresses
**Time Estimates**: Agent-optimized for rapid iteration  
**Phase Structure**: Maximize demo impact with incremental deliverable phases

---

## PHASE A: CONTRACT VALIDATION & QUICK WINS (Must Complete for Demo - Day 1)

### Phase A Overview - Contract Validation & High Impact Features

This phase validates the core contract integration with CCP's new addresses and implements the highest visual impact features. Must be completed first to ensure all subsequent work builds on a solid foundation.

**Priority**: üî• **CRITICAL PATH** - Must complete before any other phases
**Estimated Completion**: 1 day (8 hours)
**Dependencies**: CCP contract addresses - can start immediately once received

### A1. Contract Address Validation (CRITICAL - 2 hours)

**Current State Analysis**:
- ‚úÖ Treasury deployment system functional via `useAdminApproveCampaign.ts`
- ‚úÖ Payment flow working with existing contract addresses
- ‚ùå Need to update all contract addresses with CCP's new deployment
- ‚ùå Need to validate end-to-end flow works with new addresses

**Required Implementation**:
- [ ] **Update Environment Variables with CCP Contract Details**:
  - [ ] Update `NEXT_PUBLIC_TREASURY_FACTORY` with new CCP address
  - [ ] Update `NEXT_PUBLIC_GLOBAL_PARAMS` with new CCP address  
  - [ ] Update `NEXT_PUBLIC_PLATFORM_HASH` if changed
  - [ ] Update `NEXT_PUBLIC_USDC_ADDRESS` for correct network
  - [ ] Update `NEXT_PUBLIC_PLATFORM_ADMIN` wallet address

- [ ] **Test Treasury Deployment End-to-End** (1 hour):
  - [ ] Create test campaign in DRAFT status
  - [ ] Test admin approval flow with new contract addresses
  - [ ] Verify `useAdminApproveCampaign.ts` deploys treasury successfully
  - [ ] Confirm treasury address is stored in database
  - [ ] Validate treasury contract functions are accessible

- [ ] **Test Payment Flow with New Treasury** (1 hour):
  - [ ] Test crypto wallet payment to newly deployed treasury
  - [ ] Verify USDC approval and pledge transactions work
  - [ ] Confirm payment records are created correctly
  - [ ] Test payment status updates and confirmation flow

### A2. Campaign Editing System (HIGH VISUAL IMPACT - 4 hours)

**Current State Analysis**:
- ‚úÖ Campaign creation fully implemented with Cloudinary image upload
- ‚úÖ PATCH API exists in `app/api/campaigns/route.ts` but limited to status/transaction fields only  
- ‚ùå NO creator-facing edit form exists for campaign details (title, description, etc.)
- ‚ùå Campaign detail page has no edit functionality or buttons
- ‚ùå No protected route for campaign editing

**Required Implementation**:
- [ ] **Create Campaign Edit Form** (`components/campaign/edit-form.tsx`):
  - [ ] Copy and modify `components/campaign/create.tsx` structure
  - [ ] Pre-populate form with existing campaign data
  - [ ] Reuse existing Cloudinary upload functionality
  - [ ] Add proper form validation and error handling

- [ ] **Add Edit Button to Campaign Page** (30 minutes):
  - [ ] Add edit button to campaign detail page header
  - [ ] Show only to campaign creators (`campaign.creatorAddress === userAddress`)
  - [ ] Style consistently with existing UI patterns

- [ ] **Create Edit Route** (`app/campaigns/[slug]/edit/page.tsx`):
  - [ ] Create protected edit page with creator-only access
  - [ ] Add breadcrumb navigation and loading states
  - [ ] Handle form submission and success/error states

- [ ] **Expand PATCH API** (`app/api/campaigns/route.ts`):
  - [ ] Extend existing PATCH handler to accept full campaign fields
  - [ ] Add image upload handling for banner updates
  - [ ] Maintain existing security checks and validation

### A3. Admin Dashboard Enhancement (MEDIUM VISUAL IMPACT - 2 hours)

**Current State Analysis**:
- ‚úÖ Admin dashboard with campaign approval system functional
- ‚úÖ Campaign cards show basic information
- ‚ùå No treasury address display for transparency
- ‚ùå No treasury deployment status indicators

**Required Implementation**:
- [ ] **Add Treasury Address Display**:
  - [ ] Show treasury address in `components/campaign/card-admin.tsx`
  - [ ] Add treasury deployment status indicators
  - [ ] Display treasury balance if available
  - [ ] Add copy-to-clipboard functionality for addresses

### Phase A Progress: 0% Complete
- [ ] 0/12 tasks completed (Contract validation + Campaign editing + Admin enhancements)
- **Key Blockers**: Need CCP contract addresses to update environment variables
- **Ready to Start**: Contract address updates (2 hours) ‚Üí Campaign editing (4 hours)
- **Dependencies**: CCP contract details from team
- **Estimated Time**: 1 day (8 hours total)

---

## PHASE B: NOTIFICATION SYSTEM (Day 2 - High User Value)

### Phase B Overview - Essential UX Improvement

This phase implements the in-app notification system that provides essential feedback to all personas. High visual impact as users see immediate feedback for all their actions.

**Priority**: üî• **CRITICAL PATH** - Essential UX improvement with broad impact
**Estimated Completion**: 1 day (8 hours)
**Dependencies**: Phase A contract validation must be complete

### B1. Database Schema (30 minutes)

**Required Implementation**:
- [ ] **Add Notification Model** to `prisma/schema.prisma`:
```prisma
model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   // User wallet address
  type        String   // 'CAMPAIGN_SUBMITTED', 'CAMPAIGN_APPROVED', etc.
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  campaignId  Int?     // Optional campaign reference
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  
  @@index([userId])
  @@index([read])
}
```

### B2. Notification API (1 hour)

**Required Implementation**:
- [ ] **Create Notification Endpoints** (`app/api/notifications/route.ts`):
  - [ ] GET: Fetch user notifications with pagination
  - [ ] PATCH: Mark notifications as read
  - [ ] POST: Create system notifications (admin use)

### B3. Notification UI (3 hours)

**Required Implementation**:
- [ ] **Bell Icon Component** (`components/notifications/bell-icon.tsx`):
  - [ ] Add to main navigation header
  - [ ] Show unread count badge
  - [ ] Implement dropdown with recent notifications

- [ ] **Notification Integration**:
  - [ ] Trigger notifications in campaign approval flow
  - [ ] Add notifications for payment confirmations
  - [ ] Create notifications for campaign status changes

### B4. Campaign Status Integration (2 hours)

**Required Implementation**:
- [ ] **Auto-notification Triggers**:
  - [ ] Campaign submitted (DRAFT ‚Üí PENDING_APPROVAL)
  - [ ] Campaign approved/rejected (admin action)
  - [ ] Payment received (donation confirmed)
  - [ ] Round application status changes

### Phase B Progress: 0% Complete
- [ ] 0/8 notification system tasks completed
- **Key Blockers**: Database migration for Notification model
- **Ready to Start**: After Phase A contract validation complete
- **Dependencies**: Phase A treasury deployment validation
- **Estimated Time**: 1 day (8 hours total)

---

## PHASE C: WITHDRAWAL SYSTEM (Day 3 - Creator Essential)

### Phase C Overview - Core Creator Functionality

This phase implements the withdrawal system that allows campaign creators to withdraw funds from their treasury contracts. Essential for demonstrating the complete creator workflow.

**Priority**: üî• **CRITICAL PATH** - Core creator functionality
**Estimated Completion**: 1 day (8 hours)
**Dependencies**: Phase A contract validation must be complete

### C1. Withdrawal API (2 hours)

**Current State Analysis**:
- ‚úÖ Treasury deployment system functional via admin approval
- ‚úÖ Payment tracking system implemented with confirmed payments
- ‚ùå NO withdrawal functionality exists anywhere in the system
- ‚ùå NO withdrawal API endpoints exist

**Required Implementation**:
- [ ] **Create Withdrawal Endpoint** (`app/api/campaigns/[campaignId]/withdraw/route.ts`):
  - [ ] POST handler for withdrawal requests
  - [ ] Authentication check (only campaign creator can withdraw)
  - [ ] Integration with treasury contract withdrawal functions
  - [ ] Add balance validation and withdrawal limits
  - [ ] Create withdrawal records for tracking

### C2. Treasury Balance Integration (2 hours)

**Required Implementation**:
- [ ] **Add Balance Checking**:
  - [ ] Query treasury contract for available balance
  - [ ] Display balance in creator dashboard
  - [ ] Add real-time balance updates after payments

### C3. Withdrawal UI (4 hours)

**Required Implementation**:
- [ ] **Withdrawal Interface** (`components/campaign/withdrawal-form.tsx`):
  - [ ] Add withdrawal button to creator dashboard
  - [ ] Create withdrawal confirmation dialog
  - [ ] Show available balance and withdrawal history
  - [ ] Add withdrawal status tracking and notifications

### Phase C Progress: 0% Complete
- [ ] 0/7 withdrawal system tasks completed
- **Key Blockers**: Treasury contract withdrawal function integration
- **Ready to Start**: After Phase A contract validation complete
- **Dependencies**: Phase A treasury deployment working
- **Estimated Time**: 1 day (8 hours total)

### Admin Match Fund Management (Admin Essential)

**Current State Analysis**:
- ‚úÖ Round creation and management system implemented
- ‚úÖ Admin dashboard with campaign approval system
- ‚ùå NO match fund calculation upload interface
- ‚ùå NO manual match amount assignment system
- ‚ùå NO match fund tracking or oversight tools

**Required Implementation**:
- [ ] **Match Fund Database Schema** (extend `prisma/schema.prisma`):
  - [ ] Add `MatchFund` model with fields: id, roundId, campaignId, amount, calculationMethod, assignedAt
  - [ ] Add relationship to Round and Campaign models
  - [ ] Add `totalMatchPoolUsed` field to Round model

- [ ] **Match Fund API** (`app/api/rounds/[roundId]/match-funds/route.ts`):
  - [ ] POST handler for assigning match funds to campaigns
  - [ ] GET handler for retrieving match fund assignments
  - [ ] PUT handler for updating match fund amounts
  - [ ] Include validation for total pool usage limits

- [ ] **Match Fund Admin Interface** (`components/admin/match-fund-manager.tsx`):
  - [ ] Add match fund assignment interface to admin dashboard
  - [ ] Create JSON upload interface for QF calculation results
  - [ ] Add manual match amount assignment form for individual campaigns
  - [ ] Display total match pool usage and remaining amounts
  - [ ] Show match fund history and audit trail

### Admin Refund Management (Admin Essential)

**Current State Analysis**:
- ‚úÖ Payment tracking system with status management
- ‚ùå NO refund management interface exists
- ‚ùå NO refund API endpoints exist
- ‚ùå NO refund tracking system

**Required Implementation**:
- [ ] **Refund Database Schema** (extend Payment model):
  - [ ] Add `refundStatus` field to Payment model ('NONE', 'PENDING', 'COMPLETED', 'FAILED')
  - [ ] Add `refundReason` String? field
  - [ ] Add `refundedAt` DateTime? field

- [ ] **Refund API** (`app/api/payments/[paymentId]/refund/route.ts`):
  - [ ] POST handler for initiating refunds (admin only)
  - [ ] Integration with payment provider refund APIs (Stripe, Crowdsplit)
  - [ ] Update payment status and refund tracking

- [ ] **Refund Admin Interface** (`components/admin/refund-manager.tsx`):
  - [ ] Add refund management section to admin dashboard
  - [ ] Display payments eligible for refund
  - [ ] Add refund initiation buttons with reason selection
  - [ ] Show refund status and history

### Phase 0 Progress: 0% Complete
- [ ] 0/25 critical tasks completed
- **Key Blockers**: All features are completely missing and must be built from scratch
- **Ready to Start**: Campaign editing (can reuse existing creation patterns)
- **Dependencies**: None - all features can be implemented in parallel

---

## PHASE E: ROUND SPONSOR SCHEMA & BASIC ENHANCEMENTS (Foundation)

### Phase E Overview

**Treasury Status Correction**: Current TreasuryFactory implementation uses proper smart contract patterns and may already be compatible with Crowdsplit. The main requirement is testing with updated contract addresses and ensuring the deployment flow works with CC Protocol backend.

**UI Analysis - Current Round Design Gaps:**
- Round detail pages exist but lack campaign-style polish and sponsor branding
- Navigation: Rounds hidden behind feature flag `ENABLE_ROUNDS` in developer menu
- Round cards show basic info but need enhanced design matching campaign cards
- No sponsor information display anywhere in current UI
- Round directory lacks filtering and discovery features

**Files Analyzed:**
- `prisma/schema.prisma` - Round model missing sponsor fields
- `app/rounds/[id]/page.tsx` - Basic tabs design, needs campaign-style enhancement
- `components/round-card.tsx` - Simple card, needs sponsor branding
- `components/page/nav-menu-items.tsx` - Rounds in conditional developer menu
- `app/rounds/page.tsx` - Basic grid layout, needs discovery features

### Round Sponsor Information Schema (Database Changes)
- [ ] Add `sponsorName` String? field to Round model in prisma/schema.prisma
- [ ] Add `sponsorBanner` String? field to Round model (logoUrl already exists as sponsorLogo)
- [ ] Add `sponsorDescription` String? field to Round model  
- [ ] Run `pnpm prisma migrate dev --name add_sponsor_fields` to create migration
- [ ] Run `pnpm prisma generate` to update Prisma client types
- [ ] Update `Round` interface in types/round.ts to include new sponsor fields
- [ ] Update `RoundPayload` type to include sponsor fields for type safety

### Round API Schema Updates
- [ ] Update POST handler in app/api/rounds/route.ts to accept sponsor fields
- [ ] Add sponsorName, sponsorBanner, sponsorDescription to request body validation
- [ ] Update Prisma create data object to include new sponsor fields
- [ ] Update round update/edit API endpoints if they exist
- [ ] Test API with new sponsor fields using development tools

### Round Form Schema & Validation  
- [ ] Add sponsorName field to `roundSchema` in app/rounds/create/page.tsx (line ~70)
- [ ] Add sponsorBanner field to `roundSchema` with URL validation 
- [ ] Add sponsorDescription field to `roundSchema` with min length validation
- [ ] Update `refinedRoundSchema` if additional validation rules needed
- [ ] Add sponsor fields to form default values for development testing

### Round Creation Form UI (Following Campaign Create Pattern)
- [ ] Add FormField for sponsorName in app/rounds/create/page.tsx form section (~line 1000)
- [ ] Add FormField for sponsorBanner with URL input and validation (similar to logoUrl field at line 1190)
- [ ] Add FormField for sponsorDescription with Textarea component
- [ ] Follow existing FormField pattern with FormLabel, FormControl, FormMessage
- [ ] Position sponsor fields logically in form (after title/description, before technical fields)
- [ ] Test form submission with new sponsor data

### Image Upload Integration for Rounds (Use Existing Cloudinary Solution)
**Current State**: Campaigns have full Cloudinary integration with file upload, rounds only have logoUrl text input

**Tasks**:
- [ ] Add sponsorLogo file upload field to round creation form (copy pattern from campaign create.tsx lines 350-370)
- [ ] Extend Cloudinary uploadToCloudinary function in app/api/campaigns/route.ts for rounds (lines 20-62)
- [ ] Create round image upload API endpoint or extend existing rounds POST handler
- [ ] Add sponsorBanner file upload field with Cloudinary integration
- [ ] Update round form to handle File objects for sponsor logo/banner (follow campaign bannerImage pattern)
- [ ] Add image preview functionality for sponsor uploads (copy from campaign create.tsx pattern)
- [ ] Test end-to-end Cloudinary upload workflow for rounds

**Environment Requirements (Already Configured)**:
- ‚úÖ NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME (from env.template)
- ‚úÖ NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET (from env.template)
- ‚úÖ CLOUDINARY_API_SECRET (from env.template)
- ‚úÖ next.config.ts already allows res.cloudinary.com domain (verified)

### Navigation Pattern Fix (Feature Flag Removal)
- [ ] Remove `useFeatureFlag('ENABLE_ROUNDS')` condition in components/page/nav-menu-items.tsx
- [ ] Move Rounds item to always be included in navItems array
- [ ] Position Rounds between Dashboard and Collections in the array
- [ ] Remove feature flag toggle from components/page/nav-menu-features.tsx 
- [ ] Update nav item to use appropriate icon (keep BookCheck or choose better one)
- [ ] Test navigation works without feature flag

### Round Display Enhancements - Campaign-Style Polish
- [ ] Redesign round detail pages to match campaign quality (app/rounds/[id]/page.tsx)
- [ ] Add sponsor banner prominently at top of round pages
- [ ] Display sponsor name and description with appropriate prominence
- [ ] Show match fund amount and sponsor information clearly
- [ ] Add sponsor logo/branding throughout round pages
- [ ] Create sponsor metadata display components
- [ ] Enhance round cards to show sponsor information (components/round-card.tsx)
- [ ] Add match fund benefit explanation for users
- [ ] Show ongoing status, application deadlines, match fund amounts

### Campaign-Round Relationship Display
- [ ] Show which campaigns are part of each round (enhanced Projects tab)
- [ ] Display campaign count and status in round cards
- [ ] Add "Part of Round" badges on campaign cards when applicable
- [ ] Show match fund benefit potential on campaign pages
- [ ] Create QF vs regular campaign distinction in UI

### Campaign Management Current State Analysis
- [x] Campaign creation with full details (VERIFIED: components/campaign/create.tsx)
- [x] Campaign status management (VERIFIED: CampaignStatus enum in schema)  
- [x] Campaign updates posting system (VERIFIED: components/campaign/update-form.tsx for posting updates)

**Important Distinction**: The existing update-form.tsx is for posting campaign updates/news, NOT for editing campaign details. Campaign editing functionality is missing.

### Campaign Editing Implementation (New Feature Required)
**Current State**: 
- PATCH API exists in app/api/campaigns/route.ts (lines 160-200) - limited to status/transaction fields only
- NO creator-facing edit form exists for campaign details (title, description, etc.)
- Campaign detail page has no edit functionality or buttons

**Required Tasks**:
- [ ] Create new `components/campaign/edit-form.tsx` following create.tsx pattern
- [ ] Copy form structure from components/campaign/create.tsx (lines 30-460) 
- [ ] Modify for editing: populate existing values, change submission logic
- [ ] Include Cloudinary image upload for banner updates (reuse existing uploadToCloudinary function)
- [ ] Create new page at `app/campaigns/[slug]/edit/page.tsx` 
- [ ] Add protected route logic (only campaign creator can access)
- [ ] Add edit button to campaign detail page with creator-only visibility
- [ ] Expand PATCH API in app/api/campaigns/route.ts to accept full campaign fields including image updates
- [ ] Add form validation matching campaign creation schema (with File upload support)
- [ ] Test end-to-end editing workflow including image upload to Cloudinary

### Campaign Deletion Implementation (New Feature Required)
**Current State**:
- NO DELETE API endpoint exists anywhere in app/api/campaigns/
- NO deletion UI components exist
- Related records (payments, updates, comments) would need cascade handling

**Required Tasks**:
- [ ] Create new file `app/api/campaigns/[campaignId]/route.ts` with DELETE handler
- [ ] Add authentication check (only creator or admin can delete)
- [ ] Implement cascade deletion strategy for related CampaignUpdates, Comments, Payments
- [ ] Add deletion confirmation dialog component (reuse collection deletion pattern)
- [ ] Add delete button to campaign management areas (dashboard, detail page)
- [ ] Decide soft delete vs hard delete approach for campaign data integrity
- [ ] Test deletion with related data cleanup

### Round Management Enhancements  
- [x] Round creation API with validation (VERIFIED: app/api/rounds/route.ts)
- [x] Round editing functionality (VERIFIED: lib/actions/rounds/createRound.ts)
- [x] Round status calculation (VERIFIED: types/round.ts getRoundStatus())
- [ ] Round deletion API with campaign association checks
- [ ] Round deletion UI with proper warnings
- [ ] Round sponsor metadata display integration
- [ ] Enhanced round landing page with sponsor branding sections

---

## PHASE F: ROUND APPLICATION WORKFLOW (Core Functionality)

### Phase F Overview

**Authentication System**: NextAuth with session-based authentication using `isAdmin` role check in `contexts/AuthContext.tsx`. Admin routes protected via `checkAuth(['admin'])` function and `isAdmin` context hook. Admin pages use `useAuth().isAdmin` pattern for UI protection.

**Application Workflow Current State**: 
- `components/apply-to-round.tsx` exists with basic dialog but incomplete workflow
- Uses `applyCampaignToRound` action from `lib/actions/campaign-actions.ts`
- Real data includes: campaign selection, round ID, application submission
- Missing: Admin approval interface, status tracking, application management

**Files Analyzed:**
- `components/apply-to-round.tsx` - Basic application dialog with campaign selection
- `lib/actions/campaign-actions.ts` - Backend logic for campaign-round association
- `app/admin/page.tsx` - Admin interface with campaign approval patterns
- `contexts/AuthContext.tsx` - Authentication and admin role management
- `lib/api/auth.ts` - Server-side admin authentication with `checkAuth(['admin'])`

### Round Application Enhanced UI (Creator Flow Enhancement)
**Current Component Analysis**: `components/apply-to-round.tsx`
- ‚úÖ Lines 1-50: Props interface, authentication check, dialog state management
- ‚úÖ Lines 70-100: Campaign fetching from `/api/campaigns/user`
- ‚úÖ Lines 150-190: Campaign selection with RadioGroup component
- ‚úÖ Lines 245-280: Application submission handler

**Database Schema**: `RoundCampaigns` model (schema lines 190-205)
- ‚úÖ Fields: `id`, `roundId`, `campaignId`, `status` (RecipientStatus enum), `reviewedAt`, `onchainRecipientId`, `recipientAddress`
- ‚úÖ Unique constraint: `[roundId, campaignId]` prevents duplicates

**Required Tasks**:
- [ ] **Enhanced Validation** (extend apply-to-round.tsx lines 70-100):
  - [ ] Add campaign status validation (only ACTIVE campaigns eligible)
  - [ ] Add round deadline checking before campaign display
  - [ ] Add duplicate application prevention in UI
  - [ ] Check campaign treasury deployment status before allowing application

- [ ] **Application Status Display** (new component following card-admin.tsx Badge pattern lines 65-85):
  - [ ] Create `components/campaign/application-status.tsx` 
  - [ ] Add status badges to campaign detail pages
  - [ ] Create application history component (follow detail-tab-transactions.tsx pattern)
  - [ ] Add "Applied to Rounds" section in campaign cards (extend card-admin.tsx lines 180-188)

- [ ] **Form Enhancement** (extend apply-to-round.tsx lines 200-250):
  - [ ] Add campaign metadata display in selection (copy from campaign/item.tsx lines 45-85)
  - [ ] Add round information display (funding pool, dates, requirements)
  - [ ] Add confirmation step with application summary
  - [ ] Add progress indicators for application flow

### Admin Round Application Management (Following app/admin/page.tsx Patterns)
**Pattern Source**: Campaign approval workflow (app/admin/page.tsx lines 40-90)

**Required Tasks**:
- [ ] **Admin Applications Page** (`app/admin/rounds/applications/page.tsx`):
  - [ ] Copy auth protection from admin/page.tsx lines 120-130 (`useAuth().isAdmin`, `<AdminAccessDenied />`)
  - [ ] Use `useInfiniteCampaigns` pattern (lines 35-40) for applications pagination
  - [ ] Add filtering by round and status
  - [ ] Implement search and sorting capabilities

- [ ] **Application Review Component** (`components/admin/application-review.tsx`):
  - [ ] Copy approval button pattern from campaign/card-admin.tsx lines 140-155
  - [ ] Add approve/reject actions with loading states (follow `onApproveIntern` pattern lines 45-50)
  - [ ] Include campaign details display (reuse card-admin.tsx structure lines 60-120)
  - [ ] Add review notes/comments field with form validation

- [ ] **Bulk Operations** (`components/admin/bulk-application-actions.tsx`):
  - [ ] Implement checkbox selection pattern
  - [ ] Add bulk approve/reject with confirmation dialogs
  - [ ] Include progress indicators for batch operations
  - [ ] Add undo functionality for bulk actions

### Round Application API Development (Follow app/api/campaigns/route.ts Patterns)
**Pattern Source**: PATCH handler (lines 160-200) and `checkAuth(['admin'])` (line 165)

**Required Tasks**:
- [ ] **Application Status API** (`app/api/rounds/[roundId]/applications/route.ts`):
  - [ ] GET: List applications with pagination/filtering (follow campaigns route pattern)
  - [ ] Add proper `checkAuth(['admin'])` authorization
  - [ ] Include status filtering, search, and sorting parameters
  - [ ] Use existing error handling (`ApiParameterError`, `ApiAuthNotAllowed`)

- [ ] **Application Action API** (`app/api/rounds/[roundId]/applications/[applicationId]/route.ts`):
  - [ ] PATCH: Handle approve/reject actions (copy campaign approval pattern)
  - [ ] Update `status` and `reviewedAt` fields in RoundCampaigns table
  - [ ] Add proper validation and transition rules
  - [ ] Include audit trail logging

- [ ] **Bulk Actions API** (`app/api/rounds/[roundId]/applications/bulk/route.ts`):
  - [ ] POST: Handle bulk approve/reject operations
  - [ ] Include transaction handling for multiple updates
  - [ ] Add validation for bulk operation limits
  - [ ] Return detailed results for each operation

### Campaign-Round Status Integration (UI Enhancements)
**Pattern Source**: Campaign status display in card components

**Required Tasks**:
- [ ] **Campaign Card Indicators** (extend existing card components):
  - [ ] Add "Part of Round" badges to campaign/card-full.tsx (around line 80)
  - [ ] Show round application status in card-dashboard.tsx (extend status section lines 30-50)
  - [ ] Add round participation to card-admin.tsx (extend existing rounds section lines 180-188)

- [ ] **Campaign Detail Round Tab** (`components/campaign/detail-tab-rounds.tsx`):
  - [ ] Follow existing tab pattern from detail-tabs.tsx
  - [ ] List applied rounds with status, dates, match fund potential
  - [ ] Add application management for creators (withdraw, reapply)
  - [ ] Show QF match fund calculations

- [ ] **Round Detail Campaign List** (enhance round pages):
  - [ ] Add approved campaigns section to round detail pages
  - [ ] Show campaign progress within rounds
  - [ ] Add filtering/search for round campaigns
  - [ ] Include match fund allocation preview

### Application Workflow State Management
**Pattern Source**: useCampaigns.ts and form state patterns

**Required Tasks**:
- [ ] **Application Hooks** (`lib/hooks/useRoundApplications.ts`):
  - [ ] Create hooks following useCampaigns.ts patterns
  - [ ] Add `useApplicationStatus`, `useApproveApplication`, `useRejectApplication`
  - [ ] Include optimistic updates and error handling
  - [ ] Add real-time status sync

- [ ] **Application Actions** (`lib/actions/round-application-actions.ts`):
  - [ ] Extend campaign-actions.ts with admin approval actions
  - [ ] Add `approveRoundApplication`, `rejectRoundApplication` server actions
  - [ ] Include validation, authorization, and revalidation

---

## PHASE D: DUAL TREASURY INTEGRATION (Payment Flow Validation)

### Phase D Overview - Dual Contract Architecture (Temporary Testing Pattern)

**‚ö†Ô∏è IMPORTANT: Dual Treasury is a TEMPORARY Testing Solution**
The dual treasury implementation is designed ONLY for MVP testing and demonstration of both payment flows in parallel. The architecture must be designed for easy migration to a single unified contract pattern in production.

**Dual Treasury Implementation Status**: The MVP requires supporting TWO distinct payment flows with separate smart contract deployments FOR TESTING PURPOSES:

1. **Crypto-Only Flow (KeepWhatsRaised Contract)** - *Temporary*:
   - Direct wallet-to-wallet USDC transactions via existing TreasuryFactory
   - Immediate withdrawal capability for campaign creators
   - Contract function: `pledgeWithoutAReward(address backer, uint256 pledgeAmount)`
   - Uses current treasury deployment pattern in `useAdminApproveCampaign.ts`

2. **Credit Card Flow (PaymentTreasury Contract)** - *Temporary*:
   - Fiat-to-crypto conversion via Crowdsplit API + Stripe integration
   - Requires separate PaymentTreasury contract deployment for bridge functionality
   - Integration with Crowdsplit webhook system for automated treasury funding
   - Bridge between Stripe payments and blockchain treasury contracts

**Future Production State**: Single unified contract that handles both payment flows internally, eliminating the need for dual deployment and treasury routing logic.

**Current Implementation Analysis**:
- ‚úÖ TreasuryFactory pattern established (70% complete)
- ‚úÖ Crypto payment flow functional (80% complete)  
- ‚úÖ Crowdsplit API integration implemented (90% complete)
- ‚ùå PaymentTreasury contract deployment missing (0% complete)
- ‚ùå Payment flow routing logic incomplete (20% complete)
- ‚ùå Dual treasury address management not implemented (0% complete)

**Files Analyzed:**
- `lib/web3/hooks/useAdminApproveCampaign.ts` - KeepWhatsRaised treasury deployment
- `lib/web3/request-transaction.ts` - USDC approval + pledge transaction flow
- `lib/crowdsplit/service.ts` - Complete Crowdsplit API service (buy/sell transactions)
- `hooks/use-donation.ts` - Crypto donation flow with payment record creation
- `hooks/use-stripe.ts` - Stripe payment flow with Crowdsplit integration
- `app/api/crowdsplit/transactions/route.ts` - Transaction API with payment records
- `app/api/webhooks/crowdsplit/route.ts` - Webhook handling for payment confirmation

### Migration-Ready Architecture Design

**Core Design Principle**: All dual treasury logic must be easily replaceable with single contract logic through configuration and abstraction layers.

**Abstraction Strategy**:
- [x] **Treasury Interface Abstraction** (`lib/treasury/interface.ts`):
  - [x] Create `TreasuryInterface` with methods: `deploy()`, `getAddress()`, `processPayment()`, `withdraw()`
  - [x] Implement `DualTreasuryManager` class that handles routing between two contracts
  - [x] Design for easy replacement with `UnifiedTreasuryManager` class in production
  - [x] Use dependency injection pattern for treasury manager selection

- [x] **Configuration-Driven Treasury Selection**:
  - [x] Add `TREASURY_MODE` environment variable ('DUAL' | 'UNIFIED')
  - [x] Create treasury factory that returns appropriate manager based on mode
  - [x] Ensure all treasury interactions go through abstraction layer
  - [x] Design database fields to support both dual and unified patterns

- [ ] **Payment Flow Abstraction** (`lib/payment/flows/`):
  - [ ] Create `PaymentFlowInterface` with standardized methods
  - [ ] Implement separate flow classes: `CryptoPaymentFlow`, `CreditCardPaymentFlow`
  - [ ] Design unified `PaymentProcessor` that routes to appropriate flow
  - [ ] Ensure flow selection logic is easily configurable for single contract migration

### Dual Treasury Database Schema Updates (Migration-Ready)

**Required Campaign Model Changes** (designed for easy migration):
- [x] **Add Treasury Fields with Migration Path**:
  - [x] Keep existing `treasuryAddress` field as primary (will become unified contract address)
  - [x] Add `cryptoTreasuryAddress` String? field (temporary for dual mode)
  - [x] Add `paymentTreasuryAddress` String? field (temporary for dual mode)  
  - [x] Add `treasuryMode` enum field ('DUAL' | 'UNIFIED') for tracking deployment type
  - [ ] Add migration script to consolidate dual addresses back to single `treasuryAddress`
  - [x] Run `pnpm prisma migrate dev --name add_migration_ready_treasury_fields`

- [x] **Payment Model with Unified Design**:
  - [x] Keep existing Payment model structure (minimize changes for migration)
  - [x] Add `paymentFlow` enum field ('CRYPTO' | 'CREDIT_CARD') instead of treasury type
  - [x] Add `processingDetails` JSON field for flow-specific metadata (replaces separate fields)
  - [x] Design payment creation APIs to work with both dual and unified treasury modes
  - [x] Add indexes optimized for both current dual mode and future unified mode

### KeepWhatsRaised Treasury (Crypto-Only Flow) - Enhanced

**Current Status**: 70% Complete - Needs dual treasury integration
- [x] TreasuryFactory contract integration (VERIFIED: contracts/abi/TreasuryFactory.ts)
- [x] Treasury deployment logic (VERIFIED: useAdminApproveCampaign.ts)
- [x] USDC approval + pledge flow (VERIFIED: request-transaction.ts)
- [x] Payment record creation (VERIFIED: hooks/use-donation.ts)

**Required Enhancements** (with abstraction for easy migration):
- [x] **Treasury Deployment Updates** (abstracted):
  - [x] Create `lib/treasury/managers/CryptoTreasuryManager.ts` implementing `TreasuryInterface`
  - [ ] Update `useAdminApproveCampaign.ts` to use treasury manager abstraction
  - [x] Add validation through treasury interface (works for both dual and unified modes)
  - [ ] Test treasury deployment with updated CC Protocol addresses
  - [x] Add deployment retry logic in treasury manager (reusable for unified contract)

- [ ] **Enhanced Crypto Payment Flow** (abstracted):
  - [ ] Update `hooks/use-donation.ts` to use `PaymentProcessor` abstraction
  - [ ] Implement `CryptoPaymentFlow` class following `PaymentFlowInterface`
  - [ ] Add payment flow tracking in payment records (`paymentFlow: 'CRYPTO'`)
  - [ ] Implement withdrawal functions through treasury interface
  - [ ] Add withdrawal approval through configurable admin wallet

- [ ] **Payment Status & Error Handling**:
  - [ ] Enhanced payment status for failed crypto transactions
  - [ ] Payment retry logic for failed blockchain transactions
  - [ ] Real-time payment status updates in crypto donation UI
  - [ ] Improved payment history with crypto-specific indicators

### PaymentTreasury Contract (Credit Card Flow) - New Implementation

**Current Crowdsplit Integration**: 90% Complete - Needs treasury bridge
- [x] Crowdsplit service implementation (VERIFIED: lib/crowdsplit/service.ts)
- [x] Customer creation and KYC workflow (VERIFIED: bridge.md)
- [x] Stripe payment processing (VERIFIED: hooks/use-stripe.ts)
- [x] Transaction API with payment records (VERIFIED: app/api/crowdsplit/transactions/route.ts)
- [x] Webhook payment confirmation (VERIFIED: app/api/webhooks/crowdsplit/route.ts)
  - üéØ **CRITICAL**: This webhook calls PaymentTreasury `confirmPayment(paymentId)` after Crowdsplit processes credit card
  - üîÑ **Flow**: Stripe ‚Üí Crowdsplit ‚Üí Webhook ‚Üí `confirmPayment()` ‚Üí Treasury balance updated

**Required PaymentTreasury Implementation** (abstracted for migration):
- [x] **PaymentTreasury Contract Development** (temporary):
  - [x] Create `contracts/abi/PaymentTreasury.ts` with Crowdsplit bridge functions (temporary contract)
  - [x] Implement `contracts/abi/PaymentTreasuryFactory.ts` following TreasuryFactory pattern
  - [x] Add automated USDC deposit functions from Crowdsplit wallet to treasury
  - [x] Include withdrawal functions compatible with future unified contract interface

- [x] **PaymentTreasury Deployment Logic** (abstracted):
  - [x] Create `lib/treasury/managers/PaymentTreasuryManager.ts` implementing `TreasuryInterface`
  - [x] Add PaymentTreasury deployment through treasury manager abstraction
  - [x] Store addresses using migration-ready database fields
  - [x] Add environment variables with clear naming for temporary contracts

- [ ] **Credit Card to Treasury Bridge** (abstracted):
  - [ ] Enhance `app/api/webhooks/crowdsplit/route.ts` to use `PaymentProcessor` abstraction
  - üîó **KEY INTEGRATION**: Existing webhook system designed to call PaymentTreasury `confirmPayment()` method
  - üìã **Implementation**: Webhook receives Crowdsplit confirmation ‚Üí calls `paymentTreasury.confirmPayment(paymentId)`
  - ‚úÖ **Ready**: Webhook infrastructure already built, needs treasury manager integration
  - [ ] Implement `CreditCardPaymentFlow` class following `PaymentFlowInterface`
  - [ ] Add automatic USDC deposit through treasury interface (works for unified contract)
  - [ ] Implement payment status sync through payment flow abstraction

- [ ] **Enhanced Credit Card Payment Flow** (abstracted):
  - [ ] Update `hooks/use-stripe.ts` to use `PaymentProcessor` abstraction
  - [ ] Add treasury validation through treasury interface (mode-agnostic)
  - [ ] Implement treasury funding confirmation UI through payment flow interface
  - [ ] Add payment flow tracking in payment records (`paymentFlow: 'CREDIT_CARD'`)

### Payment Validation & Testing (NEW - CRITICAL FOR TREASURY OPERATIONS)

**Payment Flow Testing Framework** (‚úÖ COMPLETED):
- [x] **Testing Script Enhanced**: Added payment validation commands to `cc-protocol-test.sh`
  - [x] `./cc-protocol-test.sh pledge-test` - Test KeepWhatsRaised pledge patterns
  - [x] `./cc-protocol-test.sh payment-test` - Test PaymentTreasury credit card flow patterns  
  - [x] `./cc-protocol-test.sh balances-test` - Test treasury balance query patterns
  - [x] `./cc-protocol-test.sh payment-flows` - Run comprehensive payment flow tests
  - [x] `./cc-protocol-test.sh full` - Complete workflow + payment validation

**Required Payment Implementation Tasks** (NEXT PRIORITY):
- [ ] **Actual Treasury Address Extraction**: 
  - [ ] Parse treasury addresses from deployment transaction logs in test script
  - [ ] Update test script to use real deployed treasury addresses instead of placeholders
  - [ ] Add log parsing for `TreasuryFactoryTreasuryDeployed` events

- [ ] **Live Payment Testing**:
  - [ ] Test actual `pledgeWithoutAReward()` calls to deployed KeepWhatsRaised treasury
  - [ ] Test actual `createPayment()` ‚Üí `confirmPayment()` flow on deployed PaymentTreasury  
  - [ ] Validate treasury balance updates after real transactions
  - [ ] Test withdrawal functions on both treasury types

- [ ] **Payment Integration Validation**:
  - [ ] Test application payment routing to correct deployed treasury addresses
  - [ ] Validate payment record creation with correct `treasuryAddress` and `paymentFlow`
  - [ ] Test payment status updates and confirmation workflows
  - [ ] Verify treasury balance queries work with deployed contracts

### Payment Flow Routing & UI Integration

**Dynamic Payment Method Availability**:
- [ ] **Treasury-Based Payment Method Validation**:
  - [ ] Update `components/campaign/donation/form.tsx` to check both treasury addresses
  - [ ] Disable crypto wallet tab if `cryptoTreasuryAddress` is null or deployment failed
  - [ ] Disable credit card tab if `paymentTreasuryAddress` is null or deployment failed
  - [ ] Add loading states during treasury deployment status validation

- [ ] **Payment Flow Router Implementation**:
  - [ ] Create `lib/payment/router.ts` to route payments based on method selection
  - [ ] Route crypto payments through `hooks/use-donation.ts` to KeepWhatsRaised treasury
  - [ ] Route credit card payments through `hooks/use-stripe.ts` to PaymentTreasury
  - [ ] Add payment method validation with specific error messages for unavailable methods

- [ ] **Unified Payment Status Management**:
  - [ ] Update payment record creation to include `treasuryType` and `treasuryAddress`
  - [ ] Add unified payment status display supporting both treasury types
  - [ ] Implement payment history with treasury type indicators and balances
  - [ ] Add payment confirmation UI that works for both crypto and credit card flows

### Admin Workflow Updates for Dual Treasury

**Enhanced Campaign Approval Process**:
- [ ] **Dual Treasury Deployment in Admin Approval**:
  - [ ] Update `app/api/campaigns/[campaignId]/approve/route.ts` for dual deployment
  - [ ] Deploy KeepWhatsRaised treasury first, then PaymentTreasury sequentially
  - [ ] Handle partial deployment failures with rollback and retry logic
  - [ ] Update `treasuryDeploymentStatus` field based on successful deployments

- [ ] **Admin Dashboard Dual Treasury Management**:
  - [ ] Add dual treasury address display in `components/campaign/card-admin.tsx`
  - [ ] Show deployment status indicators for both treasury types
  - [ ] Add manual treasury deployment triggers for failed deployments
  - [ ] Include real-time treasury balance monitoring for both contract types

- [ ] **Treasury Management Interface**:
  - [ ] Create admin interface to view balances for both KeepWhatsRaised and PaymentTreasury
  - [ ] Add manual withdrawal triggers for both treasury types with admin approval
  - [ ] Implement treasury reconciliation reports comparing on-chain vs database records
  - [ ] Add treasury contract health monitoring and alerting for failed transactions

### Environment Configuration for Dual Treasury

**Enhanced Environment Variables**:
```bash
# Existing KeepWhatsRaised Configuration  
NEXT_PUBLIC_TREASURY_FACTORY=           # KeepWhatsRaised factory contract
NEXT_PUBLIC_GLOBAL_PARAMS=              # Global parameters contract
NEXT_PUBLIC_PLATFORM_HASH=              # Platform identifier hash
NEXT_PUBLIC_USDC_ADDRESS=               # USDC token contract address
NEXT_PUBLIC_PLATFORM_ADMIN=             # Admin wallet for KeepWhatsRaised approvals

# New PaymentTreasury Configuration
NEXT_PUBLIC_PAYMENT_TREASURY_FACTORY=   # PaymentTreasury factory contract address
NEXT_PUBLIC_CROWDSPLIT_BRIDGE_ADDRESS=  # Crowdsplit bridge contract for auto-funding
NEXT_PUBLIC_PAYMENT_TREASURY_ADMIN=     # PaymentTreasury admin wallet address

# Enhanced Crowdsplit Integration
CROWDSPLIT_TREASURY_WEBHOOK_URL=        # Webhook endpoint for treasury funding notifications
CROWDSPLIT_AUTO_FUNDING_ENABLED=        # Feature flag for automatic treasury funding
CROWDSPLIT_TREASURY_FUNDING_DELAY=      # Delay in seconds before funding treasury (default: 60)
```

**Configuration Tasks**:
- [ ] Add PaymentTreasury factory contract addresses for testnet and mainnet
- [ ] Configure Crowdsplit bridge contract addresses for automated funding
- [ ] Set up treasury funding webhook endpoints with proper authentication
- [ ] Test dual treasury deployment on Alfajores testnet
- [ ] Validate all contract addresses are compatible with CC Protocol backend

### Migration Strategy to Unified Contract

**Migration Path Design**:
- [ ] **Phase 1: Abstraction Layer Implementation** (Current MVP):
  - [ ] Implement all dual treasury logic through abstraction interfaces
  - [ ] Ensure zero direct contract calls outside of treasury managers
  - [ ] Design database schema to support both modes with minimal changes

- [ ] **Phase 2: Unified Contract Development** (Post-MVP):
  - [ ] Develop single contract that handles both crypto and credit card flows internally
  - [ ] Implement `UnifiedTreasuryManager` class following same `TreasuryInterface`
  - [ ] Create migration scripts to consolidate dual addresses to single `treasuryAddress`

- [ ] **Phase 3: Seamless Migration** (Production Deployment):
  - [ ] Switch `TREASURY_MODE` environment variable from 'DUAL' to 'UNIFIED'
  - [ ] Run database migration to consolidate treasury addresses
  - [ ] Deploy unified contracts and update environment variables
  - [ ] Remove temporary dual treasury code and database fields

**Migration Validation Tasks**:
- [ ] **Code Architecture Validation**:
  - [ ] Verify all treasury interactions go through abstraction layer
  - [ ] Ensure no direct references to dual treasury fields in UI components
  - [ ] Test treasury manager factory with both modes
  - [ ] Validate payment processor works with both dual and unified flows

- [ ] **Database Migration Testing**:
  - [ ] Test migration scripts on development data
  - [ ] Verify payment history integrity during treasury consolidation
  - [ ] Validate all queries work with both database schemas
  - [ ] Test rollback procedures for migration failure scenarios

### Testing Strategy for Dual Treasury Implementation

**End-to-End Payment Flow Validation**:
- [ ] **KeepWhatsRaised Flow Testing**:
  - [ ] Test: Campaign approval ‚Üí Crypto treasury deployment ‚Üí USDC wallet payment ‚Üí creator withdrawal
  - [ ] Validate treasury balance updates and payment record creation with `treasuryType: 'CRYPTO'`
  - [ ] Test error scenarios: insufficient USDC, network failures, contract deployment failures

- [ ] **PaymentTreasury Flow Testing**:
  - [ ] Test: Campaign approval ‚Üí Payment treasury deployment ‚Üí Stripe payment ‚Üí Crowdsplit webhook ‚Üí treasury funding
  - [ ] Validate automatic USDC deposit to PaymentTreasury after successful credit card payment
  - [ ] Test payment confirmation UI and treasury balance updates with `treasuryType: 'PAYMENT'`

- [ ] **Dual Treasury Integration Testing**:
  - [ ] Test campaigns with both treasury types successfully deployed
  - [ ] Validate payment method availability based on treasury deployment status
  - [ ] Test admin dashboard treasury management for both contract types
  - [ ] Verify payment history and reconciliation across both treasury types

---

## PHASE G: HOMEPAGE QF ROUNDS DISPLAY

### Homepage QF Rounds Integration
- [x] Campaign listing on homepage (VERIFIED COMPLETE)
- [ ] QF rounds section on homepage
- [ ] Combined campaign and round discovery
- [ ] Featured rounds display
- [ ] Round status indicators on homepage
- [ ] "Apply to Round" CTA on campaign cards

### Enhanced Discovery
- [ ] Round directory with filtering
- [ ] Campaign-round relationship indicators  
- [ ] Search functionality for rounds
- [ ] Category filtering for rounds
- [ ] Round timeline display

---

## PHASE H: MANUAL QF MATCH FUND SYSTEM

### QF Match Fund System (Manual)
- [ ] Match fund calculation upload interface
- [ ] Manual match amount assignment to campaigns
- [ ] Match fund metadata storage (sponsor, amount, calculation method)
- [ ] Match fund display on campaign pages
- [ ] Total match pool usage tracking
- [ ] QF calculation audit trail

### Enhanced Admin Dashboard
- [x] Basic campaign approval system (VERIFIED COMPLETE)
- [ ] Round management interface improvements
- [ ] Campaign-round approval workflow
- [ ] QF calculation results display
- [ ] Match fund oversight and assignment
- [ ] Refund management interface

### Admin User Management
- [x] User role management (VERIFIED COMPLETE)
- [ ] Campaign creator management
- [ ] Malicious content flagging
- [ ] User blocking/unblocking functionality

---

## FEATURES TO DISABLE/REMOVE FOR MVP

### Numbers Protocol Integration (DISABLE)
- [ ] Disable Numbers Protocol NFT minting UI
- [ ] Remove Numbers Protocol API calls
- [ ] Hide image verification features
- [ ] Remove IPFS integration references
- [ ] Clean up Numbers Protocol components

### Advanced Features (REMOVE/DISABLE)
- [ ] Disable social sharing functionality
- [ ] Remove advanced analytics dashboard
- [ ] Disable email notifications (keep in-app only)
- [ ] Remove multi-language support
- [ ] Disable campaign templates
- [ ] Remove A/B testing framework

### Experimental Features (CLEAN UP)
- [ ] Remove unused feature flags (keep ENABLE_ROUNDS only)
- [ ] Clean up experimental API endpoints
- [ ] Remove advanced user roles beyond admin/user
- [ ] Simplify API rate limiting
- [ ] Remove unused dependencies

---

## CODE CLEANUP & OPTIMIZATION

### Database Optimizations
- [ ] Add missing database indexes for performance
- [ ] Optimize campaign queries with proper includes
- [ ] Add foreign key constraints where missing
- [ ] Clean up unused migration files

### Code Refactoring
- [ ] Remove unused Numbers Protocol components
- [ ] Consolidate similar UI components
- [ ] Remove dead code and unused imports
- [ ] Standardize error handling patterns
- [ ] Update TypeScript types for consistency

### Configuration Cleanup
- [ ] Remove unused environment variables
- [ ] Consolidate configuration files
- [ ] Update Docker configuration
- [ ] Clean up package.json dependencies

---

## PRIORITY ASSESSMENT (Revised for MVP Demo)

### üî• **CRITICAL PATH** (Must complete for demo)
1. **Phase A**: Contract Validation & Quick Wins (campaign editing, admin enhancements)
2. **Phase B**: Notification System (essential UX improvement)  
3. **Phase C**: Withdrawal System (core creator functionality)
4. **Phase D**: Dual Treasury Integration (payment flow validation)

### üü° **HIGH PRIORITY** (Important for complete MVP)
1. **Phase E**: Round Sponsor Schema & Basic Enhancements
2. **Phase F**: Round Application Workflow (creator‚Üíadmin approval)
3. **Phase G**: Homepage QF Rounds Display
4. **Phase H**: Manual QF Match Fund System

### üü¢ **MEDIUM PRIORITY** (Polish and improvements)
1. Enhanced admin dashboard features
2. Guest persona enhancements (QF explainer, public collections)
3. Code cleanup and optimization
4. Feature disabling/removal  
5. Enhanced discovery and search
6. Performance optimizations
7. Comprehensive testing

---

## COMPLETION TRACKING (RESTRUCTURED)

### Phase A Progress: 0% Complete (NEW - CRITICAL START HERE)
- [ ] 0/12 tasks completed (Contract validation + Campaign editing + Admin enhancements)
- **Key Blockers**: Need CCP contract addresses to update environment variables
- **Ready to Start**: Contract address updates (2 hours) ‚Üí Campaign editing (4 hours)
- **Dependencies**: CCP contract details from team
- **Estimated Time**: 1 day (8 hours total)

### Phase B Progress: 0% Complete (Day 2 - High User Value)
- [ ] 0/8 notification system tasks completed
- **Key Blockers**: Database migration for Notification model
- **Ready to Start**: After Phase A contract validation complete
- **Dependencies**: Phase A treasury deployment validation
- **Estimated Time**: 1 day (8 hours total)

### Phase C Progress: 0% Complete (Day 3 - Creator Essential)
- [ ] 0/7 withdrawal system tasks completed
- **Key Blockers**: Treasury contract withdrawal function integration
- **Ready to Start**: After Phase A contract validation complete
- **Dependencies**: Phase A treasury deployment working
- **Estimated Time**: 1 day (8 hours total)

### Phase D Progress: 85% Complete (CC Protocol Integration) - **CRITICAL FIXES COMPLETE**
- [x] 29/34 tasks completed (after CC Protocol integration fixes and payment validation)
- **‚úÖ COMPLETED**: Contract validation, admin approval fixes, dual treasury deployment, payment test patterns
- **üéØ NEW COMPLETION**: Admin approval integration, CampaignInfo validation, treasury parameter fixes, comprehensive testing
- **Key Remaining**: Payment flow routing abstraction, Crowdsplit bridge automation
- **Major Achievement**: Complete CC Protocol integration with validated two-phase deployment workflow
- **Critical Path**: Payment validation tests added, ready for actual treasury operations testing

**üî• CRITICAL COMPLETED TASKS (This Session)**:
- [x] **Admin Approval Hook Fixed**: `useAdminApproveCampaign.ts` implements correct dual treasury deployment
- [x] **API Route Updated**: `/api/campaigns/[id]/approve` handles dual treasury results 
- [x] **Treasury Manager Fixes**: Corrected CampaignInfo address validation in both managers
- [x] **Database Schema Enhanced**: Added new treasury modes with migration
- [x] **Payment Test Framework**: Added comprehensive pledge and payment flow validation tests
- [x] **Documentation Organized**: All CC Protocol assets consolidated in `cc-protocol/` directory
- [x] **Web3 Integration Rules**: Added CC Protocol patterns to cursor rules for future development

### Phase E Progress: 7% Complete (Round Sponsor Schema)
- [x] 3/44 tasks completed (after Cloudinary analysis)
- **Key Blockers**: Database migration for sponsor fields, navigation feature flag removal
- **Ready to Start**: Round sponsor schema additions (no dependencies)
- **Critical Discovery**: Campaign editing is completely missing, not just UI - requires full implementation
- **Cloudinary Integration**: Fully functional for campaigns, needs extension for rounds - reuse existing solution

### Phase F Progress: 10% Complete (Round Application Workflow)
- [x] 3/30 tasks completed (after granular breakdown with direct codebase references)
- **Key Blockers**: Admin application management interface
- **Ready to Start Parallel**: Application status display components (independent of Phase E)
- **Critical Patterns Identified**: Campaign approval workflow can be directly copied for round applications
- **Dependencies**: Enhanced round UI from Phase E, but application management can proceed independently

### Phase G Progress: 20% Complete (Homepage QF Rounds)
- [x] 1/5 tasks completed
- **Key Blockers**: Homepage QF rounds section depends on Phase E-F completion
- **Dependencies**: Requires enhanced rounds and application workflow

### Phase H Progress: 20% Complete (Match Fund System)
- [x] 1/5 tasks completed
- **Key Blockers**: Match fund calculation interface
- **Dependencies**: Requires completed round workflows from Phase F

**Overall MVP Progress: 20% Complete** (revised after comprehensive MVP requirements analysis)

## RESTRUCTURED IMMEDIATE NEXT STEPS (Optimized for Visual Impact + Contract Validation)

### üî• **PHASE A: CONTRACT VALIDATION & QUICK WINS** (START IMMEDIATELY - Day 1)

**Priority**: Validate CCP contract integration + High visual impact features
**Estimated Time**: 1 day
**Why First**: Must validate core payment system works before building features on top

#### A1. Contract Address Validation (CRITICAL - 2 hours)
- [ ] **Update Environment Variables with CCP Contract Details**:
  - [ ] Update `NEXT_PUBLIC_TREASURY_FACTORY` with new CCP address
  - [ ] Update `NEXT_PUBLIC_GLOBAL_PARAMS` with new CCP address  
  - [ ] Update `NEXT_PUBLIC_PLATFORM_HASH` if changed
  - [ ] Update `NEXT_PUBLIC_USDC_ADDRESS` for correct network
  - [ ] Update `NEXT_PUBLIC_PLATFORM_ADMIN` wallet address

- [ ] **Test Treasury Deployment End-to-End** (1 hour):
  - [ ] Create test campaign in DRAFT status
  - [ ] Test admin approval flow with new contract addresses
  - [ ] Verify `useAdminApproveCampaign.ts` deploys treasury successfully
  - [ ] Confirm treasury address is stored in database
  - [ ] Validate treasury contract functions are accessible

- [ ] **Test Payment Flow with New Treasury** (1 hour):
  - [ ] Test crypto wallet payment to newly deployed treasury
  - [ ] Verify USDC approval and pledge transactions work
  - [ ] Confirm payment records are created correctly
  - [ ] Test payment status updates and confirmation flow

#### A2. Campaign Editing (HIGH VISUAL IMPACT - 4 hours)
- [ ] **Create Campaign Edit Form** (`components/campaign/edit-form.tsx`):
  - [ ] Copy and modify `components/campaign/create.tsx` structure
  - [ ] Pre-populate form with existing campaign data
  - [ ] Reuse existing Cloudinary upload functionality
  - [ ] Add proper form validation and error handling

- [ ] **Add Edit Button to Campaign Page** (30 minutes):
  - [ ] Add edit button to campaign detail page header
  - [ ] Show only to campaign creators (`campaign.creatorAddress === userAddress`)
  - [ ] Style consistently with existing UI patterns

- [ ] **Create Edit Route** (`app/campaigns/[slug]/edit/page.tsx`):
  - [ ] Create protected edit page with creator-only access
  - [ ] Add breadcrumb navigation and loading states
  - [ ] Handle form submission and success/error states

- [ ] **Expand PATCH API** (`app/api/campaigns/route.ts`):
  - [ ] Extend existing PATCH handler to accept full campaign fields
  - [ ] Add image upload handling for banner updates
  - [ ] Maintain existing security checks and validation

#### A3. Admin Dashboard Enhancement (MEDIUM VISUAL IMPACT - 2 hours)
- [ ] **Add Treasury Address Display**:
  - [ ] Show treasury address in `components/campaign/card-admin.tsx`
  - [ ] Add treasury deployment status indicators
  - [ ] Display treasury balance if available
  - [ ] Add copy-to-clipboard functionality for addresses

### üü° **PHASE B: NOTIFICATION SYSTEM** (Day 2 - High User Value)

**Priority**: Essential UX improvement with broad impact
**Estimated Time**: 1 day
**Visual Impact**: High - users see immediate feedback

#### B1. Database Schema (30 minutes)
- [ ] **Add Notification Model** to `prisma/schema.prisma`:
```prisma
model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   // User wallet address
  type        String   // 'CAMPAIGN_SUBMITTED', 'CAMPAIGN_APPROVED', etc.
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  campaignId  Int?     // Optional campaign reference
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  
  @@index([userId])
  @@index([read])
}
```

#### B2. Notification API (1 hour)
- [ ] **Create Notification Endpoints** (`app/api/notifications/route.ts`):
  - [ ] GET: Fetch user notifications with pagination
  - [ ] PATCH: Mark notifications as read
  - [ ] POST: Create system notifications (admin use)

#### B3. Notification UI (3 hours)
- [ ] **Bell Icon Component** (`components/notifications/bell-icon.tsx`):
  - [ ] Add to main navigation header
  - [ ] Show unread count badge
  - [ ] Implement dropdown with recent notifications

- [ ] **Notification Integration**:
  - [ ] Trigger notifications in campaign approval flow
  - [ ] Add notifications for payment confirmations
  - [ ] Create notifications for campaign status changes

#### B4. Campaign Status Integration (2 hours)
- [ ] **Auto-notification Triggers**:
  - [ ] Campaign submitted (DRAFT ‚Üí PENDING_APPROVAL)
  - [ ] Campaign approved/rejected (admin action)
  - [ ] Payment received (donation confirmed)
  - [ ] Round application status changes

### üü¢ **PHASE C: WITHDRAWAL SYSTEM** (Day 3 - Creator Essential)

**Priority**: Core creator functionality
**Estimated Time**: 1 day
**Dependencies**: Phase A contract validation must be complete

#### C1. Withdrawal API (2 hours)
- [ ] **Create Withdrawal Endpoint** (`app/api/campaigns/[campaignId]/withdraw/route.ts`):
  - [ ] POST handler for withdrawal requests
  - [ ] Integrate with treasury contract withdrawal functions
  - [ ] Add balance validation and withdrawal limits
  - [ ] Create withdrawal records for tracking

#### C2. Treasury Balance Integration (2 hours)
- [ ] **Add Balance Checking**:
  - [ ] Query treasury contract for available balance
  - [ ] Display balance in creator dashboard
  - [ ] Add real-time balance updates after payments

#### C3. Withdrawal UI (4 hours)
- [ ] **Withdrawal Interface** (`components/campaign/withdrawal-form.tsx`):
  - [ ] Add withdrawal button to creator dashboard
  - [ ] Create withdrawal confirmation dialog
  - [ ] Show available balance and withdrawal history
  - [ ] Add withdrawal status tracking and notifications

### Critical Path Dependencies (CLEAN SEQUENCE)
- **Phase A is MANDATORY FIRST** - validates core system functionality
- **Phase B can run parallel** to Phase C after Phase A complete
- **Phase C requires Phase A** contract validation complete
- **Phase D can run parallel** to Phases B-C (dual treasury integration)
- **Phases E-H BLOCKED** until Phase A-D provide stable foundation

**Sequential Order**: A ‚Üí (B + C + D) ‚Üí E ‚Üí F ‚Üí G ‚Üí H

### Why This Structure is More Efficient:

1. **Contract Validation First**: Ensures the foundation works before building on it
2. **High Visual Impact Early**: Campaign editing provides immediate user value
3. **Parallel Development**: Notifications and withdrawals can be built simultaneously
4. **Risk Mitigation**: Critical contract integration validated in first 2 hours
5. **User Experience Focus**: Each phase delivers tangible user-facing improvements

---

## ESTIMATED COMPLETION TIMELINE

### Week 1: Phase 1 + Phase 2 Foundation
- Complete Round sponsor schema
- Build round application workflow
- **Deliverable**: Admin can create sponsored rounds, creators can apply

### Week 2-3: Phase 3 Dual Treasury Implementation  
- Implement dual treasury database schema updates
- Complete PaymentTreasury contract development and deployment
- Integrate Crowdsplit bridge with PaymentTreasury automation
- **Deliverable**: End-to-end funding with both crypto and credit card flows via dual treasury architecture

### Week 3: Phase 4 + Phase 5 Core
- Homepage QF rounds integration
- Manual QF match fund system
- **Deliverable**: Complete QF round experience with match funding

### Week 4: Cleanup + Polish
- Feature removal and cleanup
- Testing and optimization
- **Deliverable**: Production-ready MVP

---

## NOTES FOR AGENT EXECUTION

### Development Guidelines
- Focus on one phase at a time for incremental delivery
- Test each completed task immediately 
- Prioritize functionality over polish initially
- Use existing UI components and patterns
- Maintain backward compatibility
- Follow established database patterns
- Implement proper error handling

### Critical Success Factors
1. **Migration-Ready Architecture**: All dual treasury logic must be easily replaceable with unified contract through configuration changes
2. **Abstraction Layer Integrity**: Zero direct contract calls outside of treasury managers - all interactions through interfaces
3. **Dual Treasury Demo**: Both KeepWhatsRaised and PaymentTreasury contracts must work with CC Protocol for testing demonstration
4. **Payment Flow Abstraction**: Seamless switching between crypto and credit card flows through unified payment processor
5. **Database Schema Flexibility**: Schema must support both dual and unified modes with minimal migration complexity
6. **Crowdsplit Bridge Testing**: Automatic treasury funding from credit card payments must be reliable for demo
7. **Clean Migration Path**: Clear roadmap and tooling for transitioning from dual to unified contract in production

### Testing Strategy
- Test campaign creation‚Üíround application‚Üíapproval flow
- Test crypto payment with new treasury model
- Test admin QF round management
- Test homepage QF rounds discovery
- Verify all disabled features are properly hidden

---

## üöÄ **IMMEDIATE ACTION PLAN - START NOW**

### Step 1: Get CCP Contract Details (URGENT - 15 minutes)
- [ ] Request the following from CCP team:
  - [ ] `NEXT_PUBLIC_TREASURY_FACTORY` address (new)
  - [ ] `NEXT_PUBLIC_GLOBAL_PARAMS` address (new)  
  - [ ] `NEXT_PUBLIC_PLATFORM_HASH` (confirm unchanged)
  - [ ] `NEXT_PUBLIC_USDC_ADDRESS` (confirm correct network)
  - [ ] `NEXT_PUBLIC_PLATFORM_ADMIN` wallet address (new)

### Step 2: Contract Validation (CRITICAL - 2 hours)
- [ ] Update `.env.local` with new contract addresses
- [ ] Create test campaign and test admin approval flow
- [ ] Verify treasury deployment works with new addresses
- [ ] Test end-to-end crypto payment flow
- [ ] Document any issues or changes needed

### Step 3: Campaign Editing Implementation (HIGH IMPACT - 4 hours)
- [ ] Create edit form component based on existing create form
- [ ] Add edit button to campaign detail pages
- [ ] Create protected edit route
- [ ] Expand PATCH API for full campaign updates
- [ ] Test complete editing workflow

### Step 4: Admin Dashboard Enhancement (POLISH - 2 hours)
- [ ] Add treasury address display to admin campaign cards
- [ ] Show deployment status indicators
- [ ] Add treasury balance display if available
- [ ] Test admin workflow improvements

**Total Day 1**: ~8 hours for complete Phase A
**Deliverable**: Working contract integration + Campaign editing + Enhanced admin view

This structure prioritizes:
1. ‚úÖ **Risk mitigation** - validate contracts work first
2. ‚úÖ **Visual impact** - campaign editing is immediately visible to users  
3. ‚úÖ **Foundation building** - ensures core systems work before adding features
4. ‚úÖ **Parallel development** - notifications and withdrawals can be built simultaneously after Phase A

---

## üìã **CLEAN PHASE SUMMARY**

### üî• **CRITICAL PATH** (Must Complete for Demo)
- **Phase A**: Contract Validation & Quick Wins (Day 1 - 8 hours)
  - Contract address updates and validation
  - Campaign editing system (high visual impact)
  - Admin dashboard enhancements

- **Phase B**: Notification System (Day 2 - 8 hours)
  - Database schema and API
  - UI components and integration
  - Campaign status notifications

- **Phase C**: Withdrawal System (Day 3 - 8 hours)  
  - Withdrawal API and treasury integration
  - Balance checking and UI
  - Creator dashboard enhancements

- **Phase D**: Dual Treasury Integration (Parallel with B-C)
  - PaymentTreasury contract development
  - Credit card payment flow integration
  - Dual treasury routing logic

### üü° **HIGH PRIORITY** (Important for Complete MVP)
- **Phase E**: Round Sponsor Schema & Basic Enhancements
- **Phase F**: Round Application Workflow (creator‚Üíadmin approval)
- **Phase G**: Homepage QF Rounds Display
- **Phase H**: Manual QF Match Fund System

### üìÖ **EXECUTION ORDER**
1. **Week 1**: Phase A (Day 1) ‚Üí Phase B + C (Days 2-3) + Phase D (parallel)
2. **Week 2**: Phase E ‚Üí Phase F ‚Üí Phase G ‚Üí Phase H
3. **Week 3**: Polish, testing, and optimization

**Total Critical Path**: 3 days for core functionality + visual impact
**Total MVP**: 2-3 weeks for complete demonstration-ready system
